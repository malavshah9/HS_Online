{"version":3,"sources":["./node_modules/@ionic/core/dist/esm-es5/ion-infinite-scroll_2-md.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC2H;AACzG;AACU;AAC7D;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2DAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2DAAS;AACrC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAS;AACzC;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAU;AAC7B;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,gBAAgB;AACzC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,0BAA0B,6BAA6B,aAAa,WAAW,yBAAyB,cAAc,EAAE,EAAE;AAC1H;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA,uBAAuB,2DAAU;AACjC,kCAAkC,qDAAM,+BAA+B,qDAAM;AAC7E;AACA;AACA;AACA;AACA,mBAAmB,2DAAU;AAC7B,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,gBAAgB;AACzC;AACA;AACA;AACA,qBAAqB,EAAE,2DAAC,SAAS,4BAA4B,0BAA0B,2DAAC,SAAS,oCAAoC,EAAE,2DAAC,iBAAiB,4BAA4B,0BAA0B,2DAAC,SAAS,4CAA4C,4DAAiB,oBAAoB;AAC1S;AACA;AACA,0BAA0B,qCAAqC,oBAAoB,aAAa,0BAA0B,sBAAsB,qBAAqB,uBAAuB,gBAAgB,kBAAkB,yBAAyB,sBAAsB,qBAAqB,iBAAiB,kBAAkB,cAAc,eAAe,aAAa,mBAAmB,aAAa,WAAW,uBAAuB,iBAAiB,kBAAkB,eAAe,gBAAgB,6FAA6F,uBAAuB,kBAAkB,mBAAmB,0BAA0B,yBAAyB,wBAAwB,wBAAwB,uEAAuE,cAAc,mDAAmD,qCAAqC,+OAA+O,sCAAsC,uOAAuO,oCAAoC,EAAE,EAAE;AACh8C;AACA;AACA,KAAK;AACL;AACA,CAAC;AACsG","file":"30-es5.js","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport { r as registerInstance, c as createEvent, w as writeTask, f as readTask, d as getIonMode, h, e as getElement, H as Host } from './core-c02a05e9.js';\r\nimport { b as config } from './config-503c2549.js';\r\nimport { s as sanitizeDOMString } from './index-064a03a9.js';\r\nvar InfiniteScroll = /** @class */ (function () {\r\n    function class_1(hostRef) {\r\n        var _this = this;\r\n        registerInstance(this, hostRef);\r\n        this.thrPx = 0;\r\n        this.thrPc = 0;\r\n        this.didFire = false;\r\n        this.isBusy = false;\r\n        this.isLoading = false;\r\n        /**\r\n         * The threshold distance from the bottom\r\n         * of the content to call the `infinite` output event when scrolled.\r\n         * The threshold value can be either a percent, or\r\n         * in pixels. For example, use the value of `10%` for the `infinite`\r\n         * output event to get called when the user has scrolled 10%\r\n         * from the bottom of the page. Use the value `100px` when the\r\n         * scroll is within 100 pixels from the bottom of the page.\r\n         */\r\n        this.threshold = '15%';\r\n        /**\r\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\r\n         * will be removed.\r\n         *\r\n         * Set this to true to disable the infinite scroll from actively\r\n         * trying to receive new data while scrolling. This is useful\r\n         * when it is known that there is no more data that can be added, and\r\n         * the infinite scroll is no longer needed.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * The position of the infinite scroll element.\r\n         * The value can be either `top` or `bottom`.\r\n         */\r\n        this.position = 'bottom';\r\n        this.onScroll = function () {\r\n            var scrollEl = _this.scrollEl;\r\n            if (!scrollEl || !_this.canStart()) {\r\n                return 1;\r\n            }\r\n            var infiniteHeight = _this.el.offsetHeight;\r\n            if (infiniteHeight === 0) {\r\n                // if there is no height of this element then do nothing\r\n                return 2;\r\n            }\r\n            var scrollTop = scrollEl.scrollTop;\r\n            var scrollHeight = scrollEl.scrollHeight;\r\n            var height = scrollEl.offsetHeight;\r\n            var threshold = _this.thrPc !== 0 ? (height * _this.thrPc) : _this.thrPx;\r\n            var distanceFromInfinite = (_this.position === 'bottom')\r\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\r\n                : scrollTop - infiniteHeight - threshold;\r\n            if (distanceFromInfinite < 0) {\r\n                if (!_this.didFire) {\r\n                    _this.isLoading = true;\r\n                    _this.didFire = true;\r\n                    _this.ionInfinite.emit();\r\n                    return 3;\r\n                }\r\n            }\r\n            else {\r\n                _this.didFire = false;\r\n            }\r\n            return 4;\r\n        };\r\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\r\n    }\r\n    class_1.prototype.thresholdChanged = function () {\r\n        var val = this.threshold;\r\n        if (val.lastIndexOf('%') > -1) {\r\n            this.thrPx = 0;\r\n            this.thrPc = (parseFloat(val) / 100);\r\n        }\r\n        else {\r\n            this.thrPx = parseFloat(val);\r\n            this.thrPc = 0;\r\n        }\r\n    };\r\n    class_1.prototype.disabledChanged = function () {\r\n        var disabled = this.disabled;\r\n        if (disabled) {\r\n            this.isLoading = false;\r\n            this.isBusy = false;\r\n        }\r\n        this.enableScrollEvents(!disabled);\r\n    };\r\n    class_1.prototype.connectedCallback = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var contentEl, _a;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        contentEl = this.el.closest('ion-content');\r\n                        if (!contentEl) {\r\n                            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\r\n                            return [2 /*return*/];\r\n                        }\r\n                        _a = this;\r\n                        return [4 /*yield*/, contentEl.getScrollElement()];\r\n                    case 1:\r\n                        _a.scrollEl = _b.sent();\r\n                        this.thresholdChanged();\r\n                        this.disabledChanged();\r\n                        if (this.position === 'top') {\r\n                            writeTask(function () {\r\n                                if (_this.scrollEl) {\r\n                                    _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;\r\n                                }\r\n                            });\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    class_1.prototype.disconnectedCallback = function () {\r\n        this.enableScrollEvents(false);\r\n        this.scrollEl = undefined;\r\n    };\r\n    /**\r\n     * Call `complete()` within the `ionInfinite` output event handler when\r\n     * your async operation has completed. For example, the `loading`\r\n     * state is while the app is performing an asynchronous operation,\r\n     * such as receiving more data from an AJAX request to add more items\r\n     * to a data list. Once the data has been received and UI updated, you\r\n     * then call this method to signify that the loading has completed.\r\n     * This method will change the infinite scroll's state from `loading`\r\n     * to `enabled`.\r\n     */\r\n    class_1.prototype.complete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var scrollEl, prev_1;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                scrollEl = this.scrollEl;\r\n                if (!this.isLoading || !scrollEl) {\r\n                    return [2 /*return*/];\r\n                }\r\n                this.isLoading = false;\r\n                if (this.position === 'top') {\r\n                    /**\r\n                     * New content is being added at the top, but the scrollTop position stays the same,\r\n                     * which causes a scroll jump visually. This algorithm makes sure to prevent this.\r\n                     * (Frame 1)\r\n                     *    - complete() is called, but the UI hasn't had time to update yet.\r\n                     *    - Save the current content dimensions.\r\n                     *    - Wait for the next frame using _dom.read, so the UI will be updated.\r\n                     * (Frame 2)\r\n                     *    - Read the new content dimensions.\r\n                     *    - Calculate the height difference and the new scroll position.\r\n                     *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\r\n                     * (Still frame 2, if I'm correct)\r\n                     *    - Change the scroll position (= visually maintain the scroll position).\r\n                     *    - Change the state to re-enable the InfiniteScroll.\r\n                     *    - This should be after changing the scroll position, or it could\r\n                     *    cause the InfiniteScroll to be triggered again immediately.\r\n                     * (Frame 3)\r\n                     *    Done.\r\n                     */\r\n                    this.isBusy = true;\r\n                    prev_1 = scrollEl.scrollHeight - scrollEl.scrollTop;\r\n                    // ******** DOM READ ****************\r\n                    requestAnimationFrame(function () {\r\n                        readTask(function () {\r\n                            // UI has updated, save the new content dimensions\r\n                            var scrollHeight = scrollEl.scrollHeight;\r\n                            // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\r\n                            var newScrollTop = scrollHeight - prev_1;\r\n                            // ******** DOM WRITE ****************\r\n                            requestAnimationFrame(function () {\r\n                                writeTask(function () {\r\n                                    scrollEl.scrollTop = newScrollTop;\r\n                                    _this.isBusy = false;\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    class_1.prototype.canStart = function () {\r\n        return (!this.disabled &&\r\n            !this.isBusy &&\r\n            !!this.scrollEl &&\r\n            !this.isLoading);\r\n    };\r\n    class_1.prototype.enableScrollEvents = function (shouldListen) {\r\n        if (this.scrollEl) {\r\n            if (shouldListen) {\r\n                this.scrollEl.addEventListener('scroll', this.onScroll);\r\n            }\r\n            else {\r\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\r\n            }\r\n        }\r\n    };\r\n    class_1.prototype.render = function () {\r\n        var _a;\r\n        var mode = getIonMode(this);\r\n        var disabled = this.disabled;\r\n        return (h(Host, { class: (_a = {},\r\n                _a[mode] = true,\r\n                _a['infinite-scroll-loading'] = this.isLoading,\r\n                _a['infinite-scroll-enabled'] = !disabled,\r\n                _a) }));\r\n    };\r\n    Object.defineProperty(class_1.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(class_1, \"watchers\", {\r\n        get: function () {\r\n            return {\r\n                \"threshold\": [\"thresholdChanged\"],\r\n                \"disabled\": [\"disabledChanged\"]\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(class_1, \"style\", {\r\n        get: function () { return \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_1;\r\n}());\r\nvar InfiniteScrollContent = /** @class */ (function () {\r\n    function class_2(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    class_2.prototype.componentDidLoad = function () {\r\n        if (this.loadingSpinner === undefined) {\r\n            var mode = getIonMode(this);\r\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n        }\r\n    };\r\n    class_2.prototype.render = function () {\r\n        var _a;\r\n        var mode = getIonMode(this);\r\n        return (h(Host, { class: (_a = {},\r\n                _a[mode] = true,\r\n                // Used internally for styling\r\n                _a[\"infinite-scroll-content-\" + mode] = true,\r\n                _a) }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\r\n    };\r\n    Object.defineProperty(class_2, \"style\", {\r\n        get: function () { return \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600,#666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line{stroke:var(--ion-color-step-600,#666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600,#666)}\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_2;\r\n}());\r\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\r\n"],"sourceRoot":""}