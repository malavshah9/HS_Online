{"version":3,"sources":["./node_modules/@ionic/core/dist/esm-es5/ion-virtual-scroll.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACwF;AAC3F;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+BAA+B,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA,wCAAwC,YAAY,EAAE;AACtD;AACA,2CAA2C,yCAAyC,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA,8BAA8B,+BAA+B,EAAE;AAC/D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gEAAgE,iCAAiC,EAAE;AACnG;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,0BAA0B,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uDAAuD,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAQ;AAChB,QAAQ,2DAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,oCAAoC,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG;AACzB;AACA,aAAa,EAAE,sBAAsB,2DAAC,gBAAgB,uBAAuB,uCAAuC,sCAAsC,EAAE;AAC5J;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,0BAA0B,4BAA4B,cAAc,kBAAkB,WAAW,eAAe,yBAAyB,sBAAsB,qBAAqB,iBAAiB,oCAAoC,UAAU,iCAAiC,4BAA4B,gBAAgB,kBAAkB,iBAAiB,gCAAgC,wBAAwB,sBAAsB,EAAE,EAAE;AACrb;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU,yBAAyB,WAAW,wCAAwC,iBAAiB,mDAAmD,GAAG,GAAG;AAC/L,KAAK;AACL;AAC+C","file":"78-es5.js","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport { r as registerInstance, f as readTask, w as writeTask, h, H as Host, e as getElement } from './core-c02a05e9.js';\r\nimport './config-503c2549.js';\r\nvar CELL_TYPE_ITEM = 'item';\r\nvar CELL_TYPE_HEADER = 'header';\r\nvar CELL_TYPE_FOOTER = 'footer';\r\nvar NODE_CHANGE_NONE = 0;\r\nvar NODE_CHANGE_POSITION = 1;\r\nvar NODE_CHANGE_CELL = 2;\r\nvar MIN_READS = 2;\r\nvar updateVDom = function (dom, heightIndex, cells, range) {\r\n    // reset dom\r\n    for (var _i = 0, dom_1 = dom; _i < dom_1.length; _i++) {\r\n        var node = dom_1[_i];\r\n        node.change = NODE_CHANGE_NONE;\r\n        node.d = true;\r\n    }\r\n    // try to match into exisiting dom\r\n    var toMutate = [];\r\n    var end = range.offset + range.length;\r\n    var _loop_1 = function (i) {\r\n        var cell = cells[i];\r\n        var node = dom.find(function (n) { return n.d && n.cell === cell; });\r\n        if (node) {\r\n            var top = heightIndex[i];\r\n            if (top !== node.top) {\r\n                node.top = top;\r\n                node.change = NODE_CHANGE_POSITION;\r\n            }\r\n            node.d = false;\r\n        }\r\n        else {\r\n            toMutate.push(cell);\r\n        }\r\n    };\r\n    for (var i = range.offset; i < end; i++) {\r\n        _loop_1(i);\r\n    }\r\n    // needs to append\r\n    var pool = dom.filter(function (n) { return n.d; });\r\n    var _loop_2 = function (cell) {\r\n        var node = pool.find(function (n) { return n.d && n.cell.type === cell.type; });\r\n        var index = cell.i;\r\n        if (node) {\r\n            node.d = false;\r\n            node.change = NODE_CHANGE_CELL;\r\n            node.cell = cell;\r\n            node.top = heightIndex[index];\r\n        }\r\n        else {\r\n            dom.push({\r\n                d: false,\r\n                cell: cell,\r\n                visible: true,\r\n                change: NODE_CHANGE_CELL,\r\n                top: heightIndex[index],\r\n            });\r\n        }\r\n    };\r\n    for (var _a = 0, toMutate_1 = toMutate; _a < toMutate_1.length; _a++) {\r\n        var cell = toMutate_1[_a];\r\n        _loop_2(cell);\r\n    }\r\n    dom\r\n        .filter(function (n) { return n.d && n.top !== -9999; })\r\n        .forEach(function (n) {\r\n        n.change = NODE_CHANGE_POSITION;\r\n        n.top = -9999;\r\n    });\r\n};\r\nvar doRender = function (el, nodeRender, dom, updateCellHeight) {\r\n    var children = Array.from(el.children).filter(function (n) { return n.tagName !== 'TEMPLATE'; });\r\n    var childrenNu = children.length;\r\n    var child;\r\n    for (var i = 0; i < dom.length; i++) {\r\n        var node = dom[i];\r\n        var cell = node.cell;\r\n        // the cell change, the content must be updated\r\n        if (node.change === NODE_CHANGE_CELL) {\r\n            if (i < childrenNu) {\r\n                child = children[i];\r\n                nodeRender(child, cell, i);\r\n            }\r\n            else {\r\n                var newChild = createNode(el, cell.type);\r\n                child = nodeRender(newChild, cell, i) || newChild;\r\n                child.classList.add('virtual-item');\r\n                el.appendChild(child);\r\n            }\r\n            child['$ionCell'] = cell;\r\n        }\r\n        else {\r\n            child = children[i];\r\n        }\r\n        // only update position when it changes\r\n        if (node.change !== NODE_CHANGE_NONE) {\r\n            child.style.transform = \"translate3d(0,\" + node.top + \"px,0)\";\r\n        }\r\n        // update visibility\r\n        var visible = cell.visible;\r\n        if (node.visible !== visible) {\r\n            if (visible) {\r\n                child.classList.remove('virtual-loading');\r\n            }\r\n            else {\r\n                child.classList.add('virtual-loading');\r\n            }\r\n            node.visible = visible;\r\n        }\r\n        // dynamic height\r\n        if (cell.reads > 0) {\r\n            updateCellHeight(cell, child);\r\n            cell.reads--;\r\n        }\r\n    }\r\n};\r\nvar createNode = function (el, type) {\r\n    var template = getTemplate(el, type);\r\n    if (template && el.ownerDocument) {\r\n        return el.ownerDocument.importNode(template.content, true).children[0];\r\n    }\r\n    return null;\r\n};\r\nvar getTemplate = function (el, type) {\r\n    switch (type) {\r\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\r\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\r\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\r\n    }\r\n};\r\nvar getViewport = function (scrollTop, vierportHeight, margin) {\r\n    return {\r\n        top: Math.max(scrollTop - margin, 0),\r\n        bottom: scrollTop + vierportHeight + margin\r\n    };\r\n};\r\nvar getRange = function (heightIndex, viewport, buffer) {\r\n    var topPos = viewport.top;\r\n    var bottomPos = viewport.bottom;\r\n    // find top index\r\n    var i = 0;\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] > topPos) {\r\n            break;\r\n        }\r\n    }\r\n    var offset = Math.max(i - buffer - 1, 0);\r\n    // find bottom index\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] >= bottomPos) {\r\n            break;\r\n        }\r\n    }\r\n    var end = Math.min(i + buffer, heightIndex.length);\r\n    var length = end - offset;\r\n    return { offset: offset, length: length };\r\n};\r\nvar getShouldUpdate = function (dirtyIndex, currentRange, range) {\r\n    var end = range.offset + range.length;\r\n    return (dirtyIndex <= end ||\r\n        currentRange.offset !== range.offset ||\r\n        currentRange.length !== range.length);\r\n};\r\nvar findCellIndex = function (cells, index) {\r\n    var max = cells.length > 0 ? cells[cells.length - 1].index : 0;\r\n    if (index === 0) {\r\n        return 0;\r\n    }\r\n    else if (index === max + 1) {\r\n        return cells.length;\r\n    }\r\n    else {\r\n        return cells.findIndex(function (c) { return c.index === index; });\r\n    }\r\n};\r\nvar inplaceUpdate = function (dst, src, offset) {\r\n    if (offset === 0 && src.length >= dst.length) {\r\n        return src;\r\n    }\r\n    for (var i = 0; i < src.length; i++) {\r\n        dst[i + offset] = src[i];\r\n    }\r\n    return dst;\r\n};\r\nvar calcCells = function (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) {\r\n    var cells = [];\r\n    var end = len + offset;\r\n    for (var i = offset; i < end; i++) {\r\n        var item = items[i];\r\n        if (headerFn) {\r\n            var value = headerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_HEADER,\r\n                    value: value,\r\n                    index: i,\r\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\r\n                    reads: headerHeight ? 0 : MIN_READS,\r\n                    visible: !!headerHeight,\r\n                });\r\n            }\r\n        }\r\n        cells.push({\r\n            i: j++,\r\n            type: CELL_TYPE_ITEM,\r\n            value: item,\r\n            index: i,\r\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\r\n            reads: itemHeight ? 0 : MIN_READS,\r\n            visible: !!itemHeight,\r\n        });\r\n        if (footerFn) {\r\n            var value = footerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_FOOTER,\r\n                    value: value,\r\n                    index: i,\r\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\r\n                    reads: footerHeight ? 0 : MIN_READS,\r\n                    visible: !!footerHeight,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return cells;\r\n};\r\nvar calcHeightIndex = function (buf, cells, index) {\r\n    var acum = buf[index];\r\n    for (var i = index; i < buf.length; i++) {\r\n        buf[i] = acum;\r\n        acum += cells[i].height;\r\n    }\r\n    return acum;\r\n};\r\nvar resizeBuffer = function (buf, len) {\r\n    if (!buf) {\r\n        return new Uint32Array(len);\r\n    }\r\n    if (buf.length === len) {\r\n        return buf;\r\n    }\r\n    else if (len > buf.length) {\r\n        var newBuf = new Uint32Array(len);\r\n        newBuf.set(buf);\r\n        return newBuf;\r\n    }\r\n    else {\r\n        return buf.subarray(0, len);\r\n    }\r\n};\r\nvar positionForIndex = function (index, cells, heightIndex) {\r\n    var cell = cells.find(function (c) { return c.type === CELL_TYPE_ITEM && c.index === index; });\r\n    if (cell) {\r\n        return heightIndex[cell.i];\r\n    }\r\n    return -1;\r\n};\r\nvar VirtualScroll = /** @class */ (function () {\r\n    function class_1(hostRef) {\r\n        var _this = this;\r\n        registerInstance(this, hostRef);\r\n        this.range = { offset: 0, length: 0 };\r\n        this.viewportHeight = 0;\r\n        this.cells = [];\r\n        this.virtualDom = [];\r\n        this.isEnabled = false;\r\n        this.viewportOffset = 0;\r\n        this.currentScrollTop = 0;\r\n        this.indexDirty = 0;\r\n        this.lastItemLen = 0;\r\n        this.totalHeight = 0;\r\n        /**\r\n         * It is important to provide this\r\n         * if virtual item height will be significantly larger than the default\r\n         * The approximate height of each virtual item template's cell.\r\n         * This dimension is used to help determine how many cells should\r\n         * be created when initialized, and to help calculate the height of\r\n         * the scrollable area. This height value can only use `px` units.\r\n         * Note that the actual rendered size of each cell comes from the\r\n         * app's CSS, whereas this approximation is used to help calculate\r\n         * initial dimensions before the item has been rendered.\r\n         */\r\n        this.approxItemHeight = 45;\r\n        /**\r\n         * The approximate height of each header template's cell.\r\n         * This dimension is used to help determine how many cells should\r\n         * be created when initialized, and to help calculate the height of\r\n         * the scrollable area. This height value can only use `px` units.\r\n         * Note that the actual rendered size of each cell comes from the\r\n         * app's CSS, whereas this approximation is used to help calculate\r\n         * initial dimensions before the item has been rendered.\r\n         */\r\n        this.approxHeaderHeight = 30;\r\n        /**\r\n         * The approximate width of each footer template's cell.\r\n         * This dimension is used to help determine how many cells should\r\n         * be created when initialized, and to help calculate the height of\r\n         * the scrollable area. This height value can only use `px` units.\r\n         * Note that the actual rendered size of each cell comes from the\r\n         * app's CSS, whereas this approximation is used to help calculate\r\n         * initial dimensions before the item has been rendered.\r\n         */\r\n        this.approxFooterHeight = 30;\r\n        this.onScroll = function () {\r\n            _this.updateVirtualScroll();\r\n        };\r\n    }\r\n    class_1.prototype.itemsChanged = function () {\r\n        this.calcCells();\r\n        this.updateVirtualScroll();\r\n    };\r\n    class_1.prototype.connectedCallback = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var contentEl, _a;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        contentEl = this.el.closest('ion-content');\r\n                        if (!contentEl) {\r\n                            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\r\n                            return [2 /*return*/];\r\n                        }\r\n                        _a = this;\r\n                        return [4 /*yield*/, contentEl.getScrollElement()];\r\n                    case 1:\r\n                        _a.scrollEl = _b.sent();\r\n                        this.contentEl = contentEl;\r\n                        this.calcCells();\r\n                        this.updateState();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    class_1.prototype.componentDidUpdate = function () {\r\n        this.updateState();\r\n    };\r\n    class_1.prototype.disconnectedCallback = function () {\r\n        this.scrollEl = undefined;\r\n    };\r\n    class_1.prototype.onResize = function () {\r\n        this.calcCells();\r\n        this.updateVirtualScroll();\r\n    };\r\n    /**\r\n     * Returns the position of the virtual item at the given index.\r\n     */\r\n    class_1.prototype.positionForItem = function (index) {\r\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\r\n    };\r\n    /**\r\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\r\n     * dirty any time the content or their style changes.\r\n     *\r\n     * The subset of items to be updated can are specifing by an offset and a length.\r\n     */\r\n    class_1.prototype.checkRange = function (offset, len) {\r\n        if (len === void 0) { len = -1; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var length, cellIndex, cells;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                // TODO: kind of hacky how we do in-place updated of the cells\r\n                // array. this part needs a complete refactor\r\n                if (!this.items) {\r\n                    return [2 /*return*/];\r\n                }\r\n                length = (len === -1)\r\n                    ? this.items.length - offset\r\n                    : len;\r\n                cellIndex = findCellIndex(this.cells, offset);\r\n                cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\r\n                this.cells = inplaceUpdate(this.cells, cells, cellIndex);\r\n                this.lastItemLen = this.items.length;\r\n                this.indexDirty = Math.max(offset - 1, 0);\r\n                this.scheduleUpdate();\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\r\n     *\r\n     * It's equivalent to calling:\r\n     *\r\n     * ```js\r\n     * virtualScroll.checkRange(lastItemLen);\r\n     * ```\r\n     */\r\n    class_1.prototype.checkEnd = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                if (this.items) {\r\n                    this.checkRange(this.lastItemLen);\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    class_1.prototype.updateVirtualScroll = function () {\r\n        // do nothing if virtual-scroll is disabled\r\n        if (!this.isEnabled || !this.scrollEl) {\r\n            return;\r\n        }\r\n        // unschedule future updates\r\n        if (this.timerUpdate) {\r\n            clearTimeout(this.timerUpdate);\r\n            this.timerUpdate = undefined;\r\n        }\r\n        // schedule DOM operations into the stencil queue\r\n        readTask(this.readVS.bind(this));\r\n        writeTask(this.writeVS.bind(this));\r\n    };\r\n    class_1.prototype.readVS = function () {\r\n        var _a = this, contentEl = _a.contentEl, scrollEl = _a.scrollEl, el = _a.el;\r\n        var topOffset = 0;\r\n        var node = el;\r\n        while (node && node !== contentEl) {\r\n            topOffset += node.offsetTop;\r\n            node = node.parentElement;\r\n        }\r\n        this.viewportOffset = topOffset;\r\n        if (scrollEl) {\r\n            this.viewportHeight = scrollEl.offsetHeight;\r\n            this.currentScrollTop = scrollEl.scrollTop;\r\n        }\r\n    };\r\n    class_1.prototype.writeVS = function () {\r\n        var dirtyIndex = this.indexDirty;\r\n        // get visible viewport\r\n        var scrollTop = this.currentScrollTop - this.viewportOffset;\r\n        var viewport = getViewport(scrollTop, this.viewportHeight, 100);\r\n        // compute lazily the height index\r\n        var heightIndex = this.getHeightIndex();\r\n        // get array bounds of visible cells base in the viewport\r\n        var range = getRange(heightIndex, viewport, 2);\r\n        // fast path, do nothing\r\n        var shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\r\n        if (!shouldUpdate) {\r\n            return;\r\n        }\r\n        this.range = range;\r\n        // in place mutation of the virtual DOM\r\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\r\n        // Write DOM\r\n        // Different code paths taken depending of the render API used\r\n        if (this.nodeRender) {\r\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\r\n        }\r\n        else if (this.domRender) {\r\n            this.domRender(this.virtualDom);\r\n        }\r\n        else if (this.renderItem) {\r\n            this.el.forceUpdate();\r\n        }\r\n    };\r\n    class_1.prototype.updateCellHeight = function (cell, node) {\r\n        var _this = this;\r\n        var update = function () {\r\n            if (node['$ionCell'] === cell) {\r\n                var style = window.getComputedStyle(node);\r\n                var height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\r\n                _this.setCellHeight(cell, height);\r\n            }\r\n        };\r\n        if (node && node.componentOnReady) {\r\n            node.componentOnReady().then(update);\r\n        }\r\n        else {\r\n            update();\r\n        }\r\n    };\r\n    class_1.prototype.setCellHeight = function (cell, height) {\r\n        var index = cell.i;\r\n        // the cell might changed since the height update was scheduled\r\n        if (cell !== this.cells[index]) {\r\n            return;\r\n        }\r\n        if (cell.height !== height || cell.visible !== true) {\r\n            cell.visible = true;\r\n            cell.height = height;\r\n            this.indexDirty = Math.min(this.indexDirty, index);\r\n            this.scheduleUpdate();\r\n        }\r\n    };\r\n    class_1.prototype.scheduleUpdate = function () {\r\n        var _this = this;\r\n        clearTimeout(this.timerUpdate);\r\n        this.timerUpdate = setTimeout(function () { return _this.updateVirtualScroll(); }, 100);\r\n    };\r\n    class_1.prototype.updateState = function () {\r\n        var shouldEnable = !!(this.scrollEl &&\r\n            this.cells);\r\n        if (shouldEnable !== this.isEnabled) {\r\n            this.enableScrollEvents(shouldEnable);\r\n            if (shouldEnable) {\r\n                this.updateVirtualScroll();\r\n            }\r\n        }\r\n    };\r\n    class_1.prototype.calcCells = function () {\r\n        if (!this.items) {\r\n            return;\r\n        }\r\n        this.lastItemLen = this.items.length;\r\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\r\n        this.indexDirty = 0;\r\n    };\r\n    class_1.prototype.getHeightIndex = function () {\r\n        if (this.indexDirty !== Infinity) {\r\n            this.calcHeightIndex(this.indexDirty);\r\n        }\r\n        return this.heightIndex;\r\n    };\r\n    class_1.prototype.calcHeightIndex = function (index) {\r\n        if (index === void 0) { index = 0; }\r\n        // TODO: optimize, we don't need to calculate all the cells\r\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\r\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\r\n        this.indexDirty = Infinity;\r\n    };\r\n    class_1.prototype.enableScrollEvents = function (shouldListen) {\r\n        var _this = this;\r\n        if (this.rmEvent) {\r\n            this.rmEvent();\r\n            this.rmEvent = undefined;\r\n        }\r\n        var scrollEl = this.scrollEl;\r\n        if (scrollEl) {\r\n            this.isEnabled = shouldListen;\r\n            scrollEl.addEventListener('scroll', this.onScroll);\r\n            this.rmEvent = function () {\r\n                scrollEl.removeEventListener('scroll', _this.onScroll);\r\n            };\r\n        }\r\n    };\r\n    class_1.prototype.renderVirtualNode = function (node) {\r\n        var _a = node.cell, type = _a.type, value = _a.value, index = _a.index;\r\n        switch (type) {\r\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\r\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\r\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\r\n        }\r\n    };\r\n    class_1.prototype.render = function () {\r\n        var _this = this;\r\n        return (h(Host, { style: {\r\n                height: this.totalHeight + \"px\"\r\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(function (node) { return _this.renderVirtualNode(node); })))));\r\n    };\r\n    Object.defineProperty(class_1.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(class_1, \"watchers\", {\r\n        get: function () {\r\n            return {\r\n                \"itemHeight\": [\"itemsChanged\"],\r\n                \"headerHeight\": [\"itemsChanged\"],\r\n                \"footerHeight\": [\"itemsChanged\"],\r\n                \"items\": [\"itemsChanged\"]\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(class_1, \"style\", {\r\n        get: function () { return \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute!important;top:0!important;right:0!important;left:0!important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_1;\r\n}());\r\nvar VirtualProxy = function (_a, children, utils) {\r\n    var dom = _a.dom;\r\n    return utils.map(children, function (child, i) {\r\n        var node = dom[i];\r\n        var vattrs = child.vattrs || {};\r\n        var classes = vattrs.class || '';\r\n        classes += 'virtual-item ';\r\n        if (!node.visible) {\r\n            classes += 'virtual-loading';\r\n        }\r\n        return Object.assign({}, child, { vattrs: Object.assign({}, vattrs, { class: classes, style: Object.assign({}, vattrs.style, { transform: \"translate3d(0,\" + node.top + \"px,0)\" }) }) });\r\n    });\r\n};\r\nexport { VirtualScroll as ion_virtual_scroll };\r\n"],"sourceRoot":""}