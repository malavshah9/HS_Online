{"version":3,"sources":["./node_modules/@ionic/core/dist/esm-es5/ion-refresher_2-ios.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC4G;AAC1F;AACU;AAC7D;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2DAAW;AACrC,uBAAuB,2DAAW;AAClC,wBAAwB,2DAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6JAA6B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,yBAAyB,EAAE;AAC9E,kDAAkD,wBAAwB,EAAE;AAC5E,mDAAmD,yBAAyB,EAAE;AAC9E,gDAAgD,sBAAsB,EAAE;AACxE,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA,aAAa;AACbjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,2DAAU;AAC7B,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,0BAA0B,uBAAuB,OAAO,MAAM,aAAa,kBAAkB,WAAW,YAAY,WAAW,+DAA+D,WAAW,YAAY,QAAQ,+BAA+B,cAAc,sBAAsB,oBAAoB,aAAa,0BAA0B,sBAAsB,qBAAqB,uBAAuB,YAAY,yCAAyC,aAAa,WAAW,mDAAmD,gCAAgC,wBAAwB,uBAAuB,eAAe,eAAe,kBAAkB,4KAA4K,6CAA6C,qCAAqC,mDAAmD,eAAe,kBAAkB,sHAAsH,cAAc,+DAA+D,iCAAiC,yBAAyB,iIAAiI,cAAc,oEAAoE,2BAA2B,mBAAmB,kEAAkE,cAAc,uEAAuE,2BAA2B,mBAAmB,kKAAkK,iCAAiC,8LAA8L,kCAAkC,oLAAoL,gCAAgC,EAAE,EAAE;AAC5yE;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA,+BAA+B,qDAAM;AACrC;AACA;AACA,uBAAuB,2DAAU;AACjC,qCAAqC,qDAAM,0BAA0B,qDAAM;AAC3E;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,QAAQ,2DAAU,QAAQ,EAAE,2DAAC,SAAS,6BAA6B;AAC5F,YAAY,2DAAC,SAAS,kCAAkC,EAAE,2DAAC,cAAc,sCAAsC;AAC/G,YAAY,2DAAC,SAAS,6CAA6C,4DAAiB,oBAAoB,IAAI,2DAAC,SAAS,gCAAgC;AACtJ,YAAY,2DAAC,SAAS,qCAAqC,EAAE,2DAAC,iBAAiB,+BAA+B;AAC9G,YAAY,2DAAC,SAAS,gDAAgD,4DAAiB,uBAAuB;AAC9G;AACA;AACA,CAAC;AACgF","file":"52-es5.js","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport { r as registerInstance, c as createEvent, w as writeTask, d as getIonMode, h, e as getElement, H as Host } from './core-c02a05e9.js';\r\nimport { b as config } from './config-503c2549.js';\r\nimport { s as sanitizeDOMString } from './index-064a03a9.js';\r\nvar Refresher = /** @class */ (function () {\r\n    function class_1(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.appliedStyles = false;\r\n        this.didStart = false;\r\n        this.progress = 0;\r\n        /**\r\n         * The current state which the refresher is in. The refresher's states include:\r\n         *\r\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\r\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\r\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\r\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\r\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\r\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\r\n         */\r\n        this.state = 1 /* Inactive */;\r\n        /**\r\n         * The minimum distance the user must pull down until the\r\n         * refresher will go into the `refreshing` state.\r\n         */\r\n        this.pullMin = 60;\r\n        /**\r\n         * The maximum distance of the pull until the refresher\r\n         * will automatically go into the `refreshing` state.\r\n         * Defaults to the result of `pullMin + 60`.\r\n         */\r\n        this.pullMax = this.pullMin + 60;\r\n        /**\r\n         * Time it takes to close the refresher.\r\n         */\r\n        this.closeDuration = '280ms';\r\n        /**\r\n         * Time it takes the refresher to to snap back to the `refreshing` state.\r\n         */\r\n        this.snapbackDuration = '280ms';\r\n        /**\r\n         * How much to multiply the pull speed by. To slow the pull animation down,\r\n         * pass a number less than `1`. To speed up the pull, pass a number greater\r\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\r\n         * If a negative value is passed in, the factor will be `1` instead.\r\n         *\r\n         * For example: If the value passed is `1.2` and the content is dragged by\r\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\r\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\r\n         * will be `8` pixels, less than the amount the cursor has moved.\r\n         */\r\n        this.pullFactor = 1;\r\n        /**\r\n         * If `true`, the refresher will be hidden.\r\n         */\r\n        this.disabled = false;\r\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\r\n        this.ionPull = createEvent(this, \"ionPull\", 7);\r\n        this.ionStart = createEvent(this, \"ionStart\", 7);\r\n    }\r\n    class_1.prototype.disabledChanged = function () {\r\n        if (this.gesture) {\r\n            this.gesture.setDisabled(this.disabled);\r\n        }\r\n    };\r\n    class_1.prototype.connectedCallback = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var contentEl, _a, _b;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        if (this.el.getAttribute('slot') !== 'fixed') {\r\n                            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\r\n                            return [2 /*return*/];\r\n                        }\r\n                        contentEl = this.el.closest('ion-content');\r\n                        if (!contentEl) {\r\n                            console.error('<ion-refresher> must be used inside an <ion-content>');\r\n                            return [2 /*return*/];\r\n                        }\r\n                        _a = this;\r\n                        return [4 /*yield*/, contentEl.getScrollElement()];\r\n                    case 1:\r\n                        _a.scrollEl = _c.sent();\r\n                        _b = this;\r\n                        return [4 /*yield*/, import('./index-2c4a5477.js')];\r\n                    case 2:\r\n                        _b.gesture = (_c.sent()).createGesture({\r\n                            el: contentEl,\r\n                            gestureName: 'refresher',\r\n                            gesturePriority: 10,\r\n                            direction: 'y',\r\n                            threshold: 20,\r\n                            passive: false,\r\n                            canStart: function () { return _this.canStart(); },\r\n                            onStart: function () { return _this.onStart(); },\r\n                            onMove: function (ev) { return _this.onMove(ev); },\r\n                            onEnd: function () { return _this.onEnd(); },\r\n                        });\r\n                        this.disabledChanged();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    class_1.prototype.disconnectedCallback = function () {\r\n        this.scrollEl = undefined;\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Call `complete()` when your async operation has completed.\r\n     * For example, the `refreshing` state is while the app is performing\r\n     * an asynchronous operation, such as receiving more data from an\r\n     * AJAX request. Once the data has been received, you then call this\r\n     * method to signify that the refreshing has completed and to close\r\n     * the refresher. This method also changes the refresher's state from\r\n     * `refreshing` to `completing`.\r\n     */\r\n    class_1.prototype.complete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.close(32 /* Completing */, '120ms');\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Changes the refresher's state from `refreshing` to `cancelling`.\r\n     */\r\n    class_1.prototype.cancel = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.close(16 /* Cancelling */, '');\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * A number representing how far down the user has pulled.\r\n     * The number `0` represents the user hasn't pulled down at all. The\r\n     * number `1`, and anything greater than `1`, represents that the user\r\n     * has pulled far enough down that when they let go then the refresh will\r\n     * happen. If they let go and the number is less than `1`, then the\r\n     * refresh will not happen, and the content will return to it's original\r\n     * position.\r\n     */\r\n    class_1.prototype.getProgress = function () {\r\n        return Promise.resolve(this.progress);\r\n    };\r\n    class_1.prototype.canStart = function () {\r\n        if (!this.scrollEl) {\r\n            return false;\r\n        }\r\n        if (this.state !== 1 /* Inactive */) {\r\n            return false;\r\n        }\r\n        // if the scrollTop is greater than zero then it's\r\n        // not possible to pull the content down yet\r\n        if (this.scrollEl.scrollTop > 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    class_1.prototype.onStart = function () {\r\n        this.progress = 0;\r\n        this.state = 1 /* Inactive */;\r\n    };\r\n    class_1.prototype.onMove = function (detail) {\r\n        if (!this.scrollEl) {\r\n            return;\r\n        }\r\n        // this method can get called like a bazillion times per second,\r\n        // so it's built to be as efficient as possible, and does its\r\n        // best to do any DOM read/writes only when absolutely necessary\r\n        // if multi-touch then get out immediately\r\n        var ev = detail.event;\r\n        if (ev.touches && ev.touches.length > 1) {\r\n            return;\r\n        }\r\n        // do nothing if it's actively refreshing\r\n        // or it's in the way of closing\r\n        // or this was never a startY\r\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\r\n            return;\r\n        }\r\n        var pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\r\n        var deltaY = detail.deltaY * pullFactor;\r\n        // don't bother if they're scrolling up\r\n        // and have not already started dragging\r\n        if (deltaY <= 0) {\r\n            // the current Y is higher than the starting Y\r\n            // so they scrolled up enough to be ignored\r\n            this.progress = 0;\r\n            this.state = 1 /* Inactive */;\r\n            if (this.appliedStyles) {\r\n                // reset the styles only if they were applied\r\n                this.setCss(0, '', false, '');\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n        if (this.state === 1 /* Inactive */) {\r\n            // this refresh is not already actively pulling down\r\n            // get the content's scrollTop\r\n            var scrollHostScrollTop = this.scrollEl.scrollTop;\r\n            // if the scrollTop is greater than zero then it's\r\n            // not possible to pull the content down yet\r\n            if (scrollHostScrollTop > 0) {\r\n                this.progress = 0;\r\n                return;\r\n            }\r\n            // content scrolled all the way to the top, and dragging down\r\n            this.state = 2 /* Pulling */;\r\n        }\r\n        // prevent native scroll events\r\n        if (ev.cancelable) {\r\n            ev.preventDefault();\r\n        }\r\n        // the refresher is actively pulling at this point\r\n        // move the scroll element within the content element\r\n        this.setCss(deltaY, '0ms', true, '');\r\n        if (deltaY === 0) {\r\n            // don't continue if there's no delta yet\r\n            this.progress = 0;\r\n            return;\r\n        }\r\n        var pullMin = this.pullMin;\r\n        // set pull progress\r\n        this.progress = deltaY / pullMin;\r\n        // emit \"start\" if it hasn't started yet\r\n        if (!this.didStart) {\r\n            this.didStart = true;\r\n            this.ionStart.emit();\r\n        }\r\n        // emit \"pulling\" on every move\r\n        this.ionPull.emit();\r\n        // do nothing if the delta is less than the pull threshold\r\n        if (deltaY < pullMin) {\r\n            // ensure it stays in the pulling state, cuz its not ready yet\r\n            this.state = 2 /* Pulling */;\r\n            return;\r\n        }\r\n        if (deltaY > this.pullMax) {\r\n            // they pulled farther than the max, so kick off the refresh\r\n            this.beginRefresh();\r\n            return;\r\n        }\r\n        // pulled farther than the pull min!!\r\n        // it is now in the `ready` state!!\r\n        // if they let go then it'll refresh, kerpow!!\r\n        this.state = 4 /* Ready */;\r\n        return;\r\n    };\r\n    class_1.prototype.onEnd = function () {\r\n        // only run in a zone when absolutely necessary\r\n        if (this.state === 4 /* Ready */) {\r\n            // they pulled down far enough, so it's ready to refresh\r\n            this.beginRefresh();\r\n        }\r\n        else if (this.state === 2 /* Pulling */) {\r\n            // they were pulling down, but didn't pull down far enough\r\n            // set the content back to it's original location\r\n            // and close the refresher\r\n            // set that the refresh is actively cancelling\r\n            this.cancel();\r\n        }\r\n    };\r\n    class_1.prototype.beginRefresh = function () {\r\n        // assumes we're already back in a zone\r\n        // they pulled down far enough, so it's ready to refresh\r\n        this.state = 8 /* Refreshing */;\r\n        // place the content in a hangout position while it thinks\r\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\r\n        // emit \"refresh\" because it was pulled down far enough\r\n        // and they let go to begin refreshing\r\n        this.ionRefresh.emit({\r\n            complete: this.complete.bind(this)\r\n        });\r\n    };\r\n    class_1.prototype.close = function (state, delay) {\r\n        var _this = this;\r\n        // create fallback timer incase something goes wrong with transitionEnd event\r\n        setTimeout(function () {\r\n            _this.state = 1 /* Inactive */;\r\n            _this.progress = 0;\r\n            _this.didStart = false;\r\n            _this.setCss(0, '0ms', false, '');\r\n        }, 600);\r\n        // reset set the styles on the scroll element\r\n        // set that the refresh is actively cancelling/completing\r\n        this.state = state;\r\n        this.setCss(0, this.closeDuration, true, delay);\r\n        // TODO: stop gesture\r\n    };\r\n    class_1.prototype.setCss = function (y, duration, overflowVisible, delay) {\r\n        var _this = this;\r\n        this.appliedStyles = (y > 0);\r\n        writeTask(function () {\r\n            if (_this.scrollEl) {\r\n                var style = _this.scrollEl.style;\r\n                style.transform = ((y > 0) ? \"translateY(\" + y + \"px) translateZ(0px)\" : 'translateZ(0px)');\r\n                style.transitionDuration = duration;\r\n                style.transitionDelay = delay;\r\n                style.overflow = (overflowVisible ? 'hidden' : '');\r\n            }\r\n        });\r\n    };\r\n    class_1.prototype.render = function () {\r\n        var _a;\r\n        var mode = getIonMode(this);\r\n        return (h(Host, { slot: \"fixed\", class: (_a = {},\r\n                _a[mode] = true,\r\n                // Used internally for styling\r\n                _a[\"refresher-\" + mode] = true,\r\n                _a['refresher-active'] = this.state !== 1 /* Inactive */,\r\n                _a['refresher-pulling'] = this.state === 2 /* Pulling */,\r\n                _a['refresher-ready'] = this.state === 4 /* Ready */,\r\n                _a['refresher-refreshing'] = this.state === 8 /* Refreshing */,\r\n                _a['refresher-cancelling'] = this.state === 16 /* Cancelling */,\r\n                _a['refresher-completing'] = this.state === 32 /* Completing */,\r\n                _a) }));\r\n    };\r\n    Object.defineProperty(class_1.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(class_1, \"watchers\", {\r\n        get: function () {\r\n            return {\r\n                \"disabled\": [\"disabledChanged\"]\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(class_1, \"style\", {\r\n        get: function () { return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_1;\r\n}());\r\nvar RefresherContent = /** @class */ (function () {\r\n    function class_2(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    class_2.prototype.componentWillLoad = function () {\r\n        if (this.pullingIcon === undefined) {\r\n            this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\r\n        }\r\n        if (this.refreshingSpinner === undefined) {\r\n            var mode = getIonMode(this);\r\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n        }\r\n    };\r\n    class_2.prototype.render = function () {\r\n        return (h(Host, { class: getIonMode(this) }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon &&\r\n            h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\r\n            h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) })), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\r\n            h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\r\n            h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) }))));\r\n    };\r\n    return class_2;\r\n}());\r\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\r\n"],"sourceRoot":""}