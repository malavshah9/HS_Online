{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-select_3-md.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6H;AAC/F;AACmG;AAC1E;AAC4B;AAChB;;AAEnE;AACA;AACA,QAAQ,2DAAgB;AACxB,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAW;AACpC,yBAAyB,2DAAW;AACpC,wBAAwB,2DAAW;AACnC,uBAAuB,2DAAW;AAClC,wBAAwB,2DAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oEAAe;AACxC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,gBAAgB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB,2DAAU;AAC/B,2CAA2C,OAAO,qBAAqB;AACvE;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf,eAAe,uDAAiB;AAChC;AACA;AACA,qBAAqB,2DAAU;AAC/B;AACA,+CAA+C,OAAO,qBAAqB,uHAAuH;AAClM,eAAe,uDAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2DAAU;AAC/B,yCAAyC,OAAO,qBAAqB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF,eAAe,uDAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0CAA0C;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,qDAAqD;AACpE,qBAAqB,2DAAU;AAC/B;AACA,sBAAsB,8DAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAiB;AACzB;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,oIAAoI,WAAW;AACxK;AACA,2BAA2B,4DAAW;AACtC;AACA,aAAa,EAAE,EAAE,2DAAC,SAAS,2BAA2B,eAAe,2DAAC,SAAS,6CAA6C,EAAE,2DAAC,SAAS,6BAA6B,IAAI,2DAAC,YAAY,wHAAwH;AAC9S;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA;AACA;AACA,MAAM;AACN,wBAAwB,eAAe,kCAAkC,iCAAiC,+BAA+B,qCAAqC,oBAAoB,aAAa,kBAAkB,2CAA2C,gBAAgB,UAAU,6FAA6F,MAAM,mBAAmB,oBAAoB,2CAA2C,0CAA0C,uCAAuC,uCAAuC,gBAAgB,gBAAgB,cAAc,wBAAwB,WAAW,oBAAoB,2BAA2B,yBAAyB,oBAAoB,mBAAmB,YAAY,OAAO,OAAO,MAAM,cAAc,eAAe,aAAa,gBAAgB,kBAAkB,WAAW,YAAY,SAAS,uBAAuB,eAAe,wBAAwB,qBAAqB,gBAAgB,aAAa,iDAAiD,WAAW,YAAY,QAAQ,yBAAyB,SAAS,aAAa,kBAAkB,aAAa,WAAW,OAAO,eAAe,kBAAkB,uBAAuB,mBAAmB,gBAAgB,mBAAmB,SAAS,QAAQ,gBAAgB,kBAAkB,QAAQ,SAAS,qBAAqB,mCAAmC,kCAAkC,mBAAmB,YAAY,oBAAoB,yEAAyE,WAAW,YAAY,UAAU,MAAM,mBAAmB,gBAAgB,sBAAsB,qBAAqB,aAAa,WAAW,YAAY,EAAE;AACluD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,0CAA0C,2DAAU,QAAQ;AACrF;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,wBAAwB,eAAe,aAAa,EAAE;AACtD;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAQ;AACpB;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,QAAQ,2DAAU,QAAQ,EAAE,2DAAC,gDAAgD,2DAAC;AACvG,YAAY,2DAAC,mBAAmB,2DAAC,eAAe,yBAAyB,kCAAkC,2DAAC,4DAA4D,2DAAC,6BAA6B,2DAAC,qDAAqD,2DAAC,mBAAmB,2DAAC,kCAAkC,2DAAC,eAAe,0EAA0E;AAC7Y;AACA,wBAAwB,iEAAiE,cAAc,eAAe,gBAAgB,mBAAmB,yHAAyH,cAAc,eAAe,aAAa,gBAAgB,EAAE;AAC9U;;AAEwG","file":"61-es2015.js","sourcesContent":["import { r as registerInstance, c as createEvent, d as getIonMode, h, H as Host, e as getElement } from './core-c02a05e9.js';\r\nimport './config-503c2549.js';\r\nimport { c as popoverController, b as actionSheetController, a as alertController, s as safeCall } from './overlays-518a98a4.js';\r\nimport { h as hostContext } from './theme-353a032e.js';\r\nimport { f as findItemLabel, r as renderHiddenInput } from './helpers-c90aaa66.js';\r\nimport { w as watchForOptions } from './watch-options-56e2e31f.js';\r\n\r\nconst Select = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.inputId = `ion-sel-${selectIds++}`;\r\n        this.didInit = false;\r\n        this.isExpanded = false;\r\n        /**\r\n         * If `true`, the user cannot interact with the select.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * The text to display on the cancel button.\r\n         */\r\n        this.cancelText = 'Cancel';\r\n        /**\r\n         * The text to display on the ok button.\r\n         */\r\n        this.okText = 'OK';\r\n        /**\r\n         * The name of the control, which is submitted with the form data.\r\n         */\r\n        this.name = this.inputId;\r\n        /**\r\n         * If `true`, the select can accept multiple values.\r\n         */\r\n        this.multiple = false;\r\n        /**\r\n         * The interface the select should use: `action-sheet`, `popover` or `alert`.\r\n         */\r\n        this.interface = 'alert';\r\n        /**\r\n         * Any additional options that the `alert`, `action-sheet` or `popover` interface\r\n         * can take. See the [AlertController API docs](../../alert/AlertController/#create), the\r\n         * [ActionSheetController API docs](../../action-sheet/ActionSheetController/#create) and the\r\n         * [PopoverController API docs](../../popover/PopoverController/#create) for the\r\n         * create options for each interface.\r\n         */\r\n        this.interfaceOptions = {};\r\n        this.onClick = (ev) => {\r\n            this.setFocus();\r\n            this.open(ev);\r\n        };\r\n        this.onFocus = () => {\r\n            this.ionFocus.emit();\r\n        };\r\n        this.onBlur = () => {\r\n            this.ionBlur.emit();\r\n        };\r\n        this.ionChange = createEvent(this, \"ionChange\", 7);\r\n        this.ionCancel = createEvent(this, \"ionCancel\", 7);\r\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\r\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\r\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\r\n    }\r\n    disabledChanged() {\r\n        this.emitStyle();\r\n    }\r\n    valueChanged() {\r\n        this.updateOptions();\r\n        this.emitStyle();\r\n        if (this.didInit) {\r\n            this.ionChange.emit({\r\n                value: this.value,\r\n            });\r\n        }\r\n    }\r\n    async connectedCallback() {\r\n        if (this.value === undefined) {\r\n            if (this.multiple) {\r\n                // there are no values set at this point\r\n                // so check to see who should be selected\r\n                const checked = this.childOpts.filter(o => o.selected);\r\n                this.value = checked.map(o => getOptionValue(o));\r\n            }\r\n            else {\r\n                const checked = this.childOpts.find(o => o.selected);\r\n                if (checked) {\r\n                    this.value = getOptionValue(checked);\r\n                }\r\n            }\r\n        }\r\n        this.updateOptions();\r\n        this.updateOverlayOptions();\r\n        this.emitStyle();\r\n        this.mutationO = watchForOptions(this.el, 'ion-select-option', async () => {\r\n            this.updateOptions();\r\n            this.updateOverlayOptions();\r\n        });\r\n    }\r\n    disconnectedCallback() {\r\n        if (this.mutationO) {\r\n            this.mutationO.disconnect();\r\n            this.mutationO = undefined;\r\n        }\r\n    }\r\n    componentDidLoad() {\r\n        this.didInit = true;\r\n    }\r\n    /**\r\n     * Open the select overlay. The overlay is either an alert, action sheet, or popover,\r\n     * depending on the `interface` property on the `ion-select`.\r\n     *\r\n     * @param event The user interface event that called the open.\r\n     */\r\n    async open(event) {\r\n        if (this.disabled || this.isExpanded) {\r\n            return undefined;\r\n        }\r\n        const overlay = this.overlay = await this.createOverlay(event);\r\n        this.isExpanded = true;\r\n        overlay.onDidDismiss().then(() => {\r\n            this.overlay = undefined;\r\n            this.isExpanded = false;\r\n            this.setFocus();\r\n        });\r\n        await overlay.present();\r\n        return overlay;\r\n    }\r\n    createOverlay(ev) {\r\n        let selectInterface = this.interface;\r\n        if ((selectInterface === 'action-sheet' || selectInterface === 'popover') && this.multiple) {\r\n            console.warn(`Select interface cannot be \"${selectInterface}\" with a multi-value select. Using the \"alert\" interface instead.`);\r\n            selectInterface = 'alert';\r\n        }\r\n        if (selectInterface === 'popover' && !ev) {\r\n            console.warn('Select interface cannot be a \"popover\" without passing an event. Using the \"alert\" interface instead.');\r\n            selectInterface = 'alert';\r\n        }\r\n        if (selectInterface === 'popover') {\r\n            return this.openPopover(ev);\r\n        }\r\n        if (selectInterface === 'action-sheet') {\r\n            return this.openActionSheet();\r\n        }\r\n        return this.openAlert();\r\n    }\r\n    updateOverlayOptions() {\r\n        const overlay = this.overlay;\r\n        if (!overlay) {\r\n            return;\r\n        }\r\n        const childOpts = this.childOpts;\r\n        switch (this.interface) {\r\n            case 'action-sheet':\r\n                overlay.buttons = this.createActionSheetButtons(childOpts);\r\n                break;\r\n            case 'popover':\r\n                const popover = overlay.querySelector('ion-select-popover');\r\n                if (popover) {\r\n                    popover.options = this.createPopoverOptions(childOpts);\r\n                }\r\n                break;\r\n            case 'alert':\r\n                const inputType = (this.multiple ? 'checkbox' : 'radio');\r\n                overlay.inputs = this.createAlertInputs(childOpts, inputType);\r\n                break;\r\n        }\r\n    }\r\n    createActionSheetButtons(data) {\r\n        const actionSheetButtons = data.map(option => {\r\n            return {\r\n                role: (option.selected ? 'selected' : ''),\r\n                text: option.textContent,\r\n                handler: () => {\r\n                    this.value = getOptionValue(option);\r\n                }\r\n            };\r\n        });\r\n        // Add \"cancel\" button\r\n        actionSheetButtons.push({\r\n            text: this.cancelText,\r\n            role: 'cancel',\r\n            handler: () => {\r\n                this.ionCancel.emit();\r\n            }\r\n        });\r\n        return actionSheetButtons;\r\n    }\r\n    createAlertInputs(data, inputType) {\r\n        return data.map(o => {\r\n            return {\r\n                type: inputType,\r\n                label: o.textContent,\r\n                value: getOptionValue(o),\r\n                checked: o.selected,\r\n                disabled: o.disabled\r\n            };\r\n        });\r\n    }\r\n    createPopoverOptions(data) {\r\n        return data.map(o => {\r\n            const value = getOptionValue(o);\r\n            return {\r\n                text: o.textContent,\r\n                value,\r\n                checked: o.selected,\r\n                disabled: o.disabled,\r\n                handler: () => {\r\n                    this.value = value;\r\n                    this.close();\r\n                }\r\n            };\r\n        });\r\n    }\r\n    async openPopover(ev) {\r\n        const interfaceOptions = this.interfaceOptions;\r\n        const mode = getIonMode(this);\r\n        const popoverOpts = Object.assign({ mode }, interfaceOptions, { component: 'ion-select-popover', cssClass: ['select-popover', interfaceOptions.cssClass], event: ev, componentProps: {\r\n                header: interfaceOptions.header,\r\n                subHeader: interfaceOptions.subHeader,\r\n                message: interfaceOptions.message,\r\n                value: this.value,\r\n                options: this.createPopoverOptions(this.childOpts)\r\n            } });\r\n        return popoverController.create(popoverOpts);\r\n    }\r\n    async openActionSheet() {\r\n        const mode = getIonMode(this);\r\n        const interfaceOptions = this.interfaceOptions;\r\n        const actionSheetOpts = Object.assign({ mode }, interfaceOptions, { buttons: this.createActionSheetButtons(this.childOpts), cssClass: ['select-action-sheet', interfaceOptions.cssClass] });\r\n        return actionSheetController.create(actionSheetOpts);\r\n    }\r\n    async openAlert() {\r\n        const label = this.getLabel();\r\n        const labelText = (label) ? label.textContent : null;\r\n        const interfaceOptions = this.interfaceOptions;\r\n        const inputType = (this.multiple ? 'checkbox' : 'radio');\r\n        const mode = getIonMode(this);\r\n        const alertOpts = Object.assign({ mode }, interfaceOptions, { header: interfaceOptions.header ? interfaceOptions.header : labelText, inputs: this.createAlertInputs(this.childOpts, inputType), buttons: [\r\n                {\r\n                    text: this.cancelText,\r\n                    role: 'cancel',\r\n                    handler: () => {\r\n                        this.ionCancel.emit();\r\n                    }\r\n                },\r\n                {\r\n                    text: this.okText,\r\n                    handler: (selectedValues) => {\r\n                        this.value = selectedValues;\r\n                    }\r\n                }\r\n            ], cssClass: ['select-alert', interfaceOptions.cssClass,\r\n                (this.multiple ? 'multiple-select-alert' : 'single-select-alert')] });\r\n        return alertController.create(alertOpts);\r\n    }\r\n    /**\r\n     * Close the select interface.\r\n     */\r\n    close() {\r\n        // TODO check !this.overlay || !this.isFocus()\r\n        if (!this.overlay) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return this.overlay.dismiss();\r\n    }\r\n    updateOptions() {\r\n        // iterate all options, updating the selected prop\r\n        let canSelect = true;\r\n        const { value, childOpts, compareWith, multiple } = this;\r\n        for (const selectOption of childOpts) {\r\n            const optValue = getOptionValue(selectOption);\r\n            const selected = canSelect && isOptionSelected(value, optValue, compareWith);\r\n            selectOption.selected = selected;\r\n            // if current option is selected and select is single-option, we can't select\r\n            // any option more\r\n            if (selected && !multiple) {\r\n                canSelect = false;\r\n            }\r\n        }\r\n    }\r\n    getLabel() {\r\n        return findItemLabel(this.el);\r\n    }\r\n    hasValue() {\r\n        return this.getText() !== '';\r\n    }\r\n    get childOpts() {\r\n        return Array.from(this.el.querySelectorAll('ion-select-option'));\r\n    }\r\n    getText() {\r\n        const selectedText = this.selectedText;\r\n        if (selectedText != null && selectedText !== '') {\r\n            return selectedText;\r\n        }\r\n        return generateText(this.childOpts, this.value, this.compareWith);\r\n    }\r\n    setFocus() {\r\n        if (this.buttonEl) {\r\n            this.buttonEl.focus();\r\n        }\r\n    }\r\n    emitStyle() {\r\n        this.ionStyle.emit({\r\n            'interactive': true,\r\n            'select': true,\r\n            'has-placeholder': this.placeholder != null,\r\n            'has-value': this.hasValue(),\r\n            'interactive-disabled': this.disabled,\r\n            'select-disabled': this.disabled\r\n        });\r\n    }\r\n    render() {\r\n        const { placeholder, name, disabled, isExpanded, value, el } = this;\r\n        const mode = getIonMode(this);\r\n        const labelId = this.inputId + '-lbl';\r\n        const label = findItemLabel(el);\r\n        if (label) {\r\n            label.id = labelId;\r\n        }\r\n        let addPlaceholderClass = false;\r\n        let selectText = this.getText();\r\n        if (selectText === '' && placeholder != null) {\r\n            selectText = placeholder;\r\n            addPlaceholderClass = true;\r\n        }\r\n        renderHiddenInput(true, el, name, parseValue(value), disabled);\r\n        const selectTextClasses = {\r\n            'select-text': true,\r\n            'select-placeholder': addPlaceholderClass\r\n        };\r\n        return (h(Host, { onClick: this.onClick, role: \"combobox\", \"aria-haspopup\": \"dialog\", \"aria-disabled\": disabled ? 'true' : null, \"aria-expanded\": `${isExpanded}`, \"aria-labelledby\": labelId, class: {\r\n                [mode]: true,\r\n                'in-item': hostContext('ion-item', el),\r\n                'select-disabled': disabled,\r\n            } }, h(\"div\", { class: selectTextClasses }, selectText), h(\"div\", { class: \"select-icon\", role: \"presentation\" }, h(\"div\", { class: \"select-icon-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled, ref: (btnEl => this.buttonEl = btnEl) })));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"disabled\": [\"disabledChanged\"],\r\n        \"placeholder\": [\"disabledChanged\"],\r\n        \"value\": [\"valueChanged\"]\r\n    }; }\r\n    static get style() { return \":host{padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;position:relative;font-family:var(--ion-font-family,inherit);overflow:hidden;z-index:2}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}:host(.in-item){position:static;max-width:45%}:host(.select-disabled){opacity:.4;pointer-events:none}:host(.ion-focused) button{border:2px solid #5e9ed6}.select-placeholder{color:currentColor;opacity:.33}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.select-icon{position:relative}.select-text{-ms-flex:1;flex:1;min-width:16px;font-size:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.select-icon-inner{left:5px;top:50%;margin-top:-3px;position:absolute;width:0;height:0;border-top:5px solid;border-right:5px solid transparent;border-left:5px solid transparent;color:currentColor;opacity:.33;pointer-events:none}:host-context([dir=rtl]) .select-icon-inner,[dir=rtl] .select-icon-inner{left:unset;right:unset;right:5px}:host{--padding-top:10px;--padding-end:0;--padding-bottom:11px;--padding-start:16px}.select-icon{width:19px;height:19px}\"; }\r\n};\r\nconst getOptionValue = (el) => {\r\n    const value = el.value;\r\n    return (value === undefined)\r\n        ? el.textContent || ''\r\n        : value;\r\n};\r\nconst parseValue = (value) => {\r\n    if (value == null) {\r\n        return undefined;\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value.join(',');\r\n    }\r\n    return value.toString();\r\n};\r\nconst isOptionSelected = (currentValue, compareValue, compareWith) => {\r\n    if (currentValue === undefined) {\r\n        return false;\r\n    }\r\n    if (Array.isArray(currentValue)) {\r\n        return currentValue.some(val => compareOptions(val, compareValue, compareWith));\r\n    }\r\n    else {\r\n        return compareOptions(currentValue, compareValue, compareWith);\r\n    }\r\n};\r\nconst compareOptions = (currentValue, compareValue, compareWith) => {\r\n    if (typeof compareWith === 'function') {\r\n        return compareWith(currentValue, compareValue);\r\n    }\r\n    else if (typeof compareWith === 'string') {\r\n        return currentValue[compareWith] === compareValue[compareWith];\r\n    }\r\n    else {\r\n        return currentValue === compareValue;\r\n    }\r\n};\r\nconst generateText = (opts, value, compareWith) => {\r\n    if (value === undefined) {\r\n        return '';\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return value\r\n            .map(v => textForValue(opts, v, compareWith))\r\n            .filter(opt => opt !== null)\r\n            .join(', ');\r\n    }\r\n    else {\r\n        return textForValue(opts, value, compareWith) || '';\r\n    }\r\n};\r\nconst textForValue = (opts, value, compareWith) => {\r\n    const selectOpt = opts.find(opt => {\r\n        return compareOptions(getOptionValue(opt), value, compareWith);\r\n    });\r\n    return selectOpt\r\n        ? selectOpt.textContent\r\n        : null;\r\n};\r\nlet selectIds = 0;\r\n\r\nconst SelectOption = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.inputId = `ion-selopt-${selectOptionIds++}`;\r\n        /**\r\n         * If `true`, the user cannot interact with the select option.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * If `true`, the element is selected.\r\n         */\r\n        this.selected = false;\r\n    }\r\n    render() {\r\n        return (h(Host, { role: \"option\", id: this.inputId, class: getIonMode(this) }));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get style() { return \":host{display:none}\"; }\r\n};\r\nlet selectOptionIds = 0;\r\n\r\nconst SelectPopover = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /** Array of options for the popover */\r\n        this.options = [];\r\n    }\r\n    onSelect(ev) {\r\n        const option = this.options.find(o => o.value === ev.target.value);\r\n        if (option) {\r\n            safeCall(option.handler);\r\n        }\r\n    }\r\n    render() {\r\n        return (h(Host, { class: getIonMode(this) }, h(\"ion-list\", null, this.header !== undefined && h(\"ion-list-header\", null, this.header), (this.subHeader !== undefined || this.message !== undefined) &&\r\n            h(\"ion-item\", null, h(\"ion-label\", { class: \"ion-text-wrap\" }, this.subHeader !== undefined && h(\"h3\", null, this.subHeader), this.message !== undefined && h(\"p\", null, this.message))), h(\"ion-radio-group\", null, this.options.map(option => h(\"ion-item\", null, h(\"ion-label\", null, option.text), h(\"ion-radio\", { checked: option.checked, value: option.value, disabled: option.disabled })))))));\r\n    }\r\n    static get style() { return \".sc-ion-select-popover-h ion-list.sc-ion-select-popover{margin-left:0;margin-right:0;margin-top:-1px;margin-bottom:-1px}.sc-ion-select-popover-h ion-label.sc-ion-select-popover, .sc-ion-select-popover-h ion-list-header.sc-ion-select-popover{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\"; }\r\n};\r\n\r\nexport { Select as ion_select, SelectOption as ion_select_option, SelectPopover as ion_select_popover };\r\n"],"sourceRoot":""}