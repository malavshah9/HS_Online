{"version":3,"sources":["./node_modules/@ionic/core/dist/esm-es5/input-shims-7b87c414.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAA0D;AAC1D;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAmD;AACjF,iCAAiC,8BAA8B;AAC/D,iCAAiC,+BAA+B;AAChgBAAgB,8DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8DAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AAC2B","file":"input-shims-7b87c414-js-es5.js","sourcesContent":["import { p as pointerCoord } from './helpers-c90aaa66.js';\r\nvar cloneMap = new WeakMap();\r\nvar relocateInput = function (componentEl, inputEl, shouldRelocate, inputRelativeY) {\r\n    if (inputRelativeY === void 0) { inputRelativeY = 0; }\r\n    if (cloneMap.has(componentEl) === shouldRelocate) {\r\n        return;\r\n    }\r\n    if (shouldRelocate) {\r\n        addClone(componentEl, inputEl, inputRelativeY);\r\n    }\r\n    else {\r\n        removeClone(componentEl, inputEl);\r\n    }\r\n};\r\nvar isFocused = function (input) {\r\n    return input === input.getRootNode().activeElement;\r\n};\r\nvar addClone = function (componentEl, inputEl, inputRelativeY) {\r\n    // this allows for the actual input to receive the focus from\r\n    // the user's touch event, but before it receives focus, it\r\n    // moves the actual input to a location that will not screw\r\n    // up the app's layout, and does not allow the native browser\r\n    // to attempt to scroll the input into place (messing up headers/footers)\r\n    // the cloned input fills the area of where native input should be\r\n    // while the native input fakes out the browser by relocating itself\r\n    // before it receives the actual focus event\r\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\r\n    var parentEl = inputEl.parentNode;\r\n    // DOM WRITES\r\n    var clonedEl = inputEl.cloneNode(false);\r\n    clonedEl.classList.add('cloned-input');\r\n    clonedEl.tabIndex = -1;\r\n    parentEl.appendChild(clonedEl);\r\n    cloneMap.set(componentEl, clonedEl);\r\n    var doc = componentEl.ownerDocument;\r\n    var tx = doc.dir === 'rtl' ? 9999 : -9999;\r\n    componentEl.style.pointerEvents = 'none';\r\n    inputEl.style.transform = \"translate3d(\" + tx + \"px,\" + inputRelativeY + \"px,0) scale(0)\";\r\n};\r\nvar removeClone = function (componentEl, inputEl) {\r\n    var clone = cloneMap.get(componentEl);\r\n    if (clone) {\r\n        cloneMap.delete(componentEl);\r\n        clone.remove();\r\n    }\r\n    componentEl.style.pointerEvents = '';\r\n    inputEl.style.transform = '';\r\n};\r\nvar enableHideCaretOnScroll = function (componentEl, inputEl, scrollEl) {\r\n    if (!scrollEl || !inputEl) {\r\n        return function () { return; };\r\n    }\r\n    var scrollHideCaret = function (shouldHideCaret) {\r\n        if (isFocused(inputEl)) {\r\n            relocateInput(componentEl, inputEl, shouldHideCaret);\r\n        }\r\n    };\r\n    var onBlur = function () { return relocateInput(componentEl, inputEl, false); };\r\n    var hideCaret = function () { return scrollHideCaret(true); };\r\n    var showCaret = function () { return scrollHideCaret(false); };\r\n    scrollEl.addEventListener('ionScrollStart', hideCaret);\r\n    scrollEl.addEventListener('ionScrollEnd', showCaret);\r\n    inputEl.addEventListener('blur', onBlur);\r\n    return function () {\r\n        scrollEl.removeEventListener('ionScrollStart', hideCaret);\r\n        scrollEl.removeEventListener('ionScrollEnd', showCaret);\r\n        inputEl.addEventListener('ionBlur', onBlur);\r\n    };\r\n};\r\nvar SKIP_SELECTOR = 'input, textarea, [no-blur]';\r\nvar enableInputBlurring = function () {\r\n    var focused = true;\r\n    var didScroll = false;\r\n    var doc = document;\r\n    var onScroll = function () {\r\n        didScroll = true;\r\n    };\r\n    var onFocusin = function () {\r\n        focused = true;\r\n    };\r\n    var onTouchend = function (ev) {\r\n        // if app did scroll return early\r\n        if (didScroll) {\r\n            didScroll = false;\r\n            return;\r\n        }\r\n        var active = doc.activeElement;\r\n        if (!active) {\r\n            return;\r\n        }\r\n        // only blur if the active element is a text-input or a textarea\r\n        if (active.matches(SKIP_SELECTOR)) {\r\n            return;\r\n        }\r\n        // if the selected target is the active element, do not blur\r\n        var tapped = ev.target;\r\n        if (tapped === active) {\r\n            return;\r\n        }\r\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\r\n            return;\r\n        }\r\n        focused = false;\r\n        // TODO: find a better way, why 50ms?\r\n        setTimeout(function () {\r\n            if (!focused) {\r\n                active.blur();\r\n            }\r\n        }, 50);\r\n    };\r\n    doc.addEventListener('ionScrollStart', onScroll);\r\n    doc.addEventListener('focusin', onFocusin, true);\r\n    doc.addEventListener('touchend', onTouchend, false);\r\n    return function () {\r\n        doc.removeEventListener('ionScrollStart', onScroll, true);\r\n        doc.removeEventListener('focusin', onFocusin, true);\r\n        doc.removeEventListener('touchend', onTouchend, false);\r\n    };\r\n};\r\nvar SCROLL_ASSIST_SPEED = 0.3;\r\nvar getScrollData = function (componentEl, contentEl, keyboardHeight) {\r\n    var itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\r\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\r\n};\r\nvar calcScrollData = function (inputRect, contentRect, keyboardHeight, platformHeight) {\r\n    // compute input's Y values relative to the body\r\n    var inputTop = inputRect.top;\r\n    var inputBottom = inputRect.bottom;\r\n    // compute visible area\r\n    var visibleAreaTop = contentRect.top;\r\n    var visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\r\n    // compute safe area\r\n    var safeAreaTop = visibleAreaTop + 15;\r\n    var safeAreaBottom = visibleAreaBottom * 0.5;\r\n    // figure out if each edge of the input is within the safe area\r\n    var distanceToBottom = safeAreaBottom - inputBottom;\r\n    var distanceToTop = safeAreaTop - inputTop;\r\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\r\n    var desiredScrollAmount = Math.round((distanceToBottom < 0)\r\n        ? -distanceToBottom\r\n        : (distanceToTop > 0)\r\n            ? -distanceToTop\r\n            : 0);\r\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\r\n    // gets focus, so make sure we don't scroll the input above the visible area\r\n    var scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\r\n    var distance = Math.abs(scrollAmount);\r\n    var duration = distance / SCROLL_ASSIST_SPEED;\r\n    var scrollDuration = Math.min(400, Math.max(150, duration));\r\n    return {\r\n        scrollAmount: scrollAmount,\r\n        scrollDuration: scrollDuration,\r\n        scrollPadding: keyboardHeight,\r\n        inputSafeY: -(inputTop - safeAreaTop) + 4\r\n    };\r\n};\r\nvar enableScrollAssist = function (componentEl, inputEl, contentEl, keyboardHeight) {\r\n    var coord;\r\n    var touchStart = function (ev) {\r\n        coord = pointerCoord(ev);\r\n    };\r\n    var touchEnd = function (ev) {\r\n        // input cover touchend/mouseup\r\n        if (!coord) {\r\n            return;\r\n        }\r\n        // get where the touchend/mouseup ended\r\n        var endCoord = pointerCoord(ev);\r\n        // focus this input if the pointer hasn't moved XX pixels\r\n        // and the input doesn't already have focus\r\n        if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n            // begin the input focus process\r\n            jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight);\r\n        }\r\n    };\r\n    componentEl.addEventListener('touchstart', touchStart, true);\r\n    componentEl.addEventListener('touchend', touchEnd, true);\r\n    return function () {\r\n        componentEl.removeEventListener('touchstart', touchStart, true);\r\n        componentEl.removeEventListener('touchend', touchEnd, true);\r\n    };\r\n};\r\nvar jsSetFocus = function (componentEl, inputEl, contentEl, keyboardHeight) {\r\n    var scrollData = getScrollData(componentEl, contentEl, keyboardHeight);\r\n    if (Math.abs(scrollData.scrollAmount) < 4) {\r\n        // the text input is in a safe position that doesn't\r\n        // require it to be scrolled into view, just set focus now\r\n        inputEl.focus();\r\n        return;\r\n    }\r\n    // temporarily move the focus to the focus holder so the browser\r\n    // doesn't freak out while it's trying to get the input in place\r\n    // at this point the native text input still does not have focus\r\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\r\n    inputEl.focus();\r\n    // scroll the input into place\r\n    contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration).then(function () {\r\n        // the scroll view is in the correct position now\r\n        // give the native text input focus\r\n        relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\r\n        // ensure this is the focused input\r\n        inputEl.focus();\r\n    });\r\n};\r\nvar hasPointerMoved = function (threshold, startCoord, endCoord) {\r\n    if (startCoord && endCoord) {\r\n        var deltaX = (startCoord.x - endCoord.x);\r\n        var deltaY = (startCoord.y - endCoord.y);\r\n        var distance = deltaX * deltaX + deltaY * deltaY;\r\n        return distance > (threshold * threshold);\r\n    }\r\n    return false;\r\n};\r\nvar PADDING_TIMER_KEY = '$ionPaddingTimer';\r\nvar enableScrollPadding = function (keyboardHeight) {\r\n    var doc = document;\r\n    var onFocusin = function (ev) {\r\n        setScrollPadding(ev.target, keyboardHeight);\r\n    };\r\n    var onFocusout = function (ev) {\r\n        setScrollPadding(ev.target, 0);\r\n    };\r\n    doc.addEventListener('focusin', onFocusin);\r\n    doc.addEventListener('focusout', onFocusout);\r\n    return function () {\r\n        doc.removeEventListener('focusin', onFocusin);\r\n        doc.removeEventListener('focusout', onFocusout);\r\n    };\r\n};\r\nvar setScrollPadding = function (input, keyboardHeight) {\r\n    if (input.tagName !== 'INPUT') {\r\n        return;\r\n    }\r\n    if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\r\n        return;\r\n    }\r\n    if (input.parentElement &&\r\n        input.parentElement.parentElement &&\r\n        input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\r\n        return;\r\n    }\r\n    var el = input.closest('ion-content');\r\n    if (el === null) {\r\n        return;\r\n    }\r\n    var timer = el[PADDING_TIMER_KEY];\r\n    if (timer) {\r\n        clearTimeout(timer);\r\n    }\r\n    if (keyboardHeight > 0) {\r\n        el.style.setProperty('--keyboard-offset', keyboardHeight + \"px\");\r\n    }\r\n    else {\r\n        el[PADDING_TIMER_KEY] = setTimeout(function () {\r\n            el.style.setProperty('--keyboard-offset', '0px');\r\n        }, 120);\r\n    }\r\n};\r\nvar INPUT_BLURRING = true;\r\nvar SCROLL_PADDING = true;\r\nvar startInputShims = function (config) {\r\n    var doc = document;\r\n    var keyboardHeight = config.getNumber('keyboardHeight', 290);\r\n    var scrollAssist = config.getBoolean('scrollAssist', true);\r\n    var hideCaret = config.getBoolean('hideCaretOnScroll', true);\r\n    var inputBlurring = config.getBoolean('inputBlurring', true);\r\n    var scrollPadding = config.getBoolean('scrollPadding', true);\r\n    var inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\r\n    var hideCaretMap = new WeakMap();\r\n    var scrollAssistMap = new WeakMap();\r\n    var registerInput = function (componentEl) {\r\n        var inputEl = (componentEl.shadowRoot || componentEl).querySelector('input') || (componentEl.shadowRoot || componentEl).querySelector('textarea');\r\n        var scrollEl = componentEl.closest('ion-content');\r\n        if (!inputEl) {\r\n            return;\r\n        }\r\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\r\n            var rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\r\n            hideCaretMap.set(componentEl, rmFn);\r\n        }\r\n        if (!!scrollEl && scrollAssist && !scrollAssistMap.has(componentEl)) {\r\n            var rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, keyboardHeight);\r\n            scrollAssistMap.set(componentEl, rmFn);\r\n        }\r\n    };\r\n    var unregisterInput = function (componentEl) {\r\n        if (hideCaret) {\r\n            var fn = hideCaretMap.get(componentEl);\r\n            if (fn) {\r\n                fn();\r\n            }\r\n            hideCaretMap.delete(componentEl);\r\n        }\r\n        if (scrollAssist) {\r\n            var fn = scrollAssistMap.get(componentEl);\r\n            if (fn) {\r\n                fn();\r\n            }\r\n            scrollAssistMap.delete(componentEl);\r\n        }\r\n    };\r\n    if (inputBlurring && INPUT_BLURRING) {\r\n        enableInputBlurring();\r\n    }\r\n    if (scrollPadding && SCROLL_PADDING) {\r\n        enableScrollPadding(keyboardHeight);\r\n    }\r\n    // Input might be already loaded in the DOM before ion-device-hacks did.\r\n    // At this point we need to look for all of the inputs not registered yet\r\n    // and register them.\r\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\r\n        var input = inputs_1[_i];\r\n        registerInput(input);\r\n    }\r\n    doc.addEventListener('ionInputDidLoad', (function (ev) {\r\n        registerInput(ev.detail);\r\n    }));\r\n    doc.addEventListener('ionInputDidUnload', (function (ev) {\r\n        unregisterInput(ev.detail);\r\n    }));\r\n};\r\nexport { startInputShims };\r\n"],"sourceRoot":""}