{"version":3,"sources":["./node_modules/@ionic/core/dist/esm-es5/index-ae28cb4b.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,qCAAqC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,iCAAiC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,6BAA6B;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,6BAA6B;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,qCAAqC,sDAAsD;AAC3F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wBAAwB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,6BAA6B;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,gBAAgB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,6BAA6B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8BAA8B;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,gCAAgC;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,mCAAmC;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,gBAAgB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,+BAA+B;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,kCAAkC;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,gBAAgB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gBAAgB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,gBAAgB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACkB","file":"index-ae28cb4b-js-es5.js","sourcesContent":["var transitionEnd = function (el, callback) {\r\n    var unRegTrans;\r\n    var opts = { passive: true };\r\n    var unregister = function () {\r\n        if (unRegTrans) {\r\n            unRegTrans();\r\n        }\r\n    };\r\n    var onTransitionEnd = function (ev) {\r\n        if (el === ev.target) {\r\n            unregister();\r\n            callback(ev);\r\n        }\r\n    };\r\n    if (el) {\r\n        el.addEventListener('webkitTransitionEnd', onTransitionEnd, opts);\r\n        el.addEventListener('transitionend', onTransitionEnd, opts);\r\n        unRegTrans = function () {\r\n            el.removeEventListener('webkitTransitionEnd', onTransitionEnd, opts);\r\n            el.removeEventListener('transitionend', onTransitionEnd, opts);\r\n        };\r\n    }\r\n    return unregister;\r\n};\r\nvar CSS_VALUE_REGEX = /(^-?\\d*\\.?\\d*)(.*)/;\r\nvar DURATION_MIN = 32;\r\nvar TRANSITION_END_FALLBACK_PADDING_MS = 400;\r\nvar TRANSFORM_PROPS = {\r\n    'translateX': 1,\r\n    'translateY': 1,\r\n    'translateZ': 1,\r\n    'scale': 1,\r\n    'scaleX': 1,\r\n    'scaleY': 1,\r\n    'scaleZ': 1,\r\n    'rotate': 1,\r\n    'rotateX': 1,\r\n    'rotateY': 1,\r\n    'rotateZ': 1,\r\n    'skewX': 1,\r\n    'skewY': 1,\r\n    'perspective': 1\r\n};\r\nvar win = typeof window !== 'undefined' ? window : {};\r\nvar raf = win.requestAnimationFrame\r\n    ? win.requestAnimationFrame.bind(win)\r\n    : function (f) { return f(Date.now()); };\r\nvar Animator = /** @class */ (function () {\r\n    function Animator() {\r\n        this._hasDur = false;\r\n        this._hasTweenEffect = false;\r\n        this._isAsync = false;\r\n        this._isReverse = false;\r\n        this._destroyed = false;\r\n        this.hasChildren = false;\r\n        this.isPlaying = false;\r\n        this.hasCompleted = false;\r\n    }\r\n    Animator.prototype.addElement = function (el) {\r\n        if (el != null) {\r\n            if (el.length > 0) {\r\n                for (var i = 0; i < el.length; i++) {\r\n                    this._addEl(el[i]);\r\n                }\r\n            }\r\n            else {\r\n                this._addEl(el);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * NO DOM\r\n     */\r\n    Animator.prototype._addEl = function (el) {\r\n        if (el.nodeType === 1) {\r\n            (this._elements = this._elements || []).push(el);\r\n        }\r\n    };\r\n    /**\r\n     * Add a child animation to this animation.\r\n     */\r\n    Animator.prototype.add = function (childAnimation) {\r\n        childAnimation.parent = this;\r\n        this.hasChildren = true;\r\n        (this._childAnimations = this._childAnimations || []).push(childAnimation);\r\n        return this;\r\n    };\r\n    /**\r\n     * Get the duration of this animation. If this animation does\r\n     * not have a duration, then it'll get the duration from its parent.\r\n     */\r\n    Animator.prototype.getDuration = function (opts) {\r\n        if (opts && opts.duration !== undefined) {\r\n            return opts.duration;\r\n        }\r\n        else if (this._duration !== undefined) {\r\n            return this._duration;\r\n        }\r\n        else if (this.parent) {\r\n            return this.parent.getDuration();\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns if the animation is a root one.\r\n     */\r\n    Animator.prototype.isRoot = function () {\r\n        return !this.parent;\r\n    };\r\n    /**\r\n     * Set the duration for this animation.\r\n     */\r\n    Animator.prototype.duration = function (milliseconds) {\r\n        this._duration = milliseconds;\r\n        return this;\r\n    };\r\n    /**\r\n     * Get the easing of this animation. If this animation does\r\n     * not have an easing, then it'll get the easing from its parent.\r\n     */\r\n    Animator.prototype.getEasing = function () {\r\n        if (this._isReverse && this._reversedEasingName !== undefined) {\r\n            return this._reversedEasingName;\r\n        }\r\n        return this._easingName !== undefined ? this._easingName : (this.parent && this.parent.getEasing()) || null;\r\n    };\r\n    /**\r\n     * Set the easing for this animation.\r\n     */\r\n    Animator.prototype.easing = function (name) {\r\n        this._easingName = name;\r\n        return this;\r\n    };\r\n    /**\r\n     * Set the easing for this reversed animation.\r\n     */\r\n    Animator.prototype.easingReverse = function (name) {\r\n        this._reversedEasingName = name;\r\n        return this;\r\n    };\r\n    /**\r\n     * Add the \"from\" value for a specific property.\r\n     */\r\n    Animator.prototype.from = function (prop, val) {\r\n        this._addProp('from', prop, val);\r\n        return this;\r\n    };\r\n    /**\r\n     * Add the \"to\" value for a specific property.\r\n     */\r\n    Animator.prototype.to = function (prop, val, clearProperyAfterTransition) {\r\n        if (clearProperyAfterTransition === void 0) { clearProperyAfterTransition = false; }\r\n        var fx = this._addProp('to', prop, val);\r\n        if (clearProperyAfterTransition) {\r\n            // if this effect is a transform then clear the transform effect\r\n            // otherwise just clear the actual property\r\n            this.afterClearStyles(fx.trans ? ['transform', '-webkit-transform'] : [prop]);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Shortcut to add both the \"from\" and \"to\" for the same property.\r\n     */\r\n    Animator.prototype.fromTo = function (prop, fromVal, toVal, clearProperyAfterTransition) {\r\n        return this.from(prop, fromVal).to(prop, toVal, clearProperyAfterTransition);\r\n    };\r\n    /**\r\n     * NO DOM\r\n     */\r\n    Animator.prototype._getProp = function (name) {\r\n        if (this._fxProperties) {\r\n            return this._fxProperties.find(function (prop) { return prop.effectName === name; });\r\n        }\r\n        return undefined;\r\n    };\r\n    Animator.prototype._addProp = function (state, prop, val) {\r\n        var fxProp = this._getProp(prop);\r\n        if (!fxProp) {\r\n            // first time we've see this EffectProperty\r\n            var shouldTrans = (TRANSFORM_PROPS[prop] === 1);\r\n            fxProp = {\r\n                effectName: prop,\r\n                trans: shouldTrans,\r\n                // add the will-change property for transforms or opacity\r\n                wc: (shouldTrans ? 'transform' : prop)\r\n            };\r\n            (this._fxProperties = this._fxProperties || []).push(fxProp);\r\n        }\r\n        // add from/to EffectState to the EffectProperty\r\n        var fxState = {\r\n            val: val,\r\n            num: 0,\r\n            effectUnit: '',\r\n        };\r\n        fxProp[state] = fxState;\r\n        if (typeof val === 'string' && val.indexOf(' ') < 0) {\r\n            var r = val.match(CSS_VALUE_REGEX);\r\n            if (r) {\r\n                var num = parseFloat(r[1]);\r\n                if (!isNaN(num)) {\r\n                    fxState.num = num;\r\n                }\r\n                fxState.effectUnit = (r[0] !== r[2] ? r[2] : '');\r\n            }\r\n        }\r\n        else if (typeof val === 'number') {\r\n            fxState.num = val;\r\n        }\r\n        return fxProp;\r\n    };\r\n    /**\r\n     * Add CSS class to this animation's elements\r\n     * before the animation begins.\r\n     */\r\n    Animator.prototype.beforeAddClass = function (className) {\r\n        (this._beforeAddClasses = this._beforeAddClasses || []).push(className);\r\n        return this;\r\n    };\r\n    /**\r\n     * Remove CSS class from this animation's elements\r\n     * before the animation begins.\r\n     */\r\n    Animator.prototype.beforeRemoveClass = function (className) {\r\n        (this._beforeRemoveClasses = this._beforeRemoveClasses || []).push(className);\r\n        return this;\r\n    };\r\n    /**\r\n     * Set CSS inline styles to this animation's elements\r\n     * before the animation begins.\r\n     */\r\n    Animator.prototype.beforeStyles = function (styles) {\r\n        this._beforeStyles = styles;\r\n        return this;\r\n    };\r\n    /**\r\n     * Clear CSS inline styles from this animation's elements\r\n     * before the animation begins.\r\n     */\r\n    Animator.prototype.beforeClearStyles = function (propertyNames) {\r\n        this._beforeStyles = this._beforeStyles || {};\r\n        for (var _i = 0, propertyNames_1 = propertyNames; _i < propertyNames_1.length; _i++) {\r\n            var prop = propertyNames_1[_i];\r\n            this._beforeStyles[prop] = '';\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Add a function which contains DOM reads, which will run\r\n     * before the animation begins.\r\n     */\r\n    Animator.prototype.beforeAddRead = function (domReadFn) {\r\n        (this._readCallbacks = this._readCallbacks || []).push(domReadFn);\r\n        return this;\r\n    };\r\n    /**\r\n     * Add a function which contains DOM writes, which will run\r\n     * before the animation begins.\r\n     */\r\n    Animator.prototype.beforeAddWrite = function (domWriteFn) {\r\n        (this._writeCallbacks = this._writeCallbacks || []).push(domWriteFn);\r\n        return this;\r\n    };\r\n    /**\r\n     * Add CSS class to this animation's elements\r\n     * after the animation finishes.\r\n     */\r\n    Animator.prototype.afterAddClass = function (className) {\r\n        (this._afterAddClasses = this._afterAddClasses || []).push(className);\r\n        return this;\r\n    };\r\n    /**\r\n     * Remove CSS class from this animation's elements\r\n     * after the animation finishes.\r\n     */\r\n    Animator.prototype.afterRemoveClass = function (className) {\r\n        (this._afterRemoveClasses = this._afterRemoveClasses || []).push(className);\r\n        return this;\r\n    };\r\n    /**\r\n     * Set CSS inline styles to this animation's elements\r\n     * after the animation finishes.\r\n     */\r\n    Animator.prototype.afterStyles = function (styles) {\r\n        this._afterStyles = styles;\r\n        return this;\r\n    };\r\n    /**\r\n     * Clear CSS inline styles from this animation's elements\r\n     * after the animation finishes.\r\n     */\r\n    Animator.prototype.afterClearStyles = function (propertyNames) {\r\n        this._afterStyles = this._afterStyles || {};\r\n        for (var _i = 0, propertyNames_2 = propertyNames; _i < propertyNames_2.length; _i++) {\r\n            var prop = propertyNames_2[_i];\r\n            this._afterStyles[prop] = '';\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Play the animation.\r\n     */\r\n    Animator.prototype.play = function (opts) {\r\n        var _this = this;\r\n        // If the animation was already invalidated (it did finish), do nothing\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n        // this is the top level animation and is in full control\r\n        // of when the async play() should actually kick off\r\n        // if there is no duration then it'll set the TO property immediately\r\n        // if there is a duration, then it'll stage all animations at the\r\n        // FROM property and transition duration, wait a few frames, then\r\n        // kick off the animation by setting the TO property for each animation\r\n        this._isAsync = this._hasDuration(opts);\r\n        // ensure all past transition end events have been cleared\r\n        this._clearAsync();\r\n        // recursively kicks off the correct progress step for each child animation\r\n        // ******** DOM WRITE ****************\r\n        this._playInit(opts);\r\n        // doubling up RAFs since this animation was probably triggered\r\n        // from an input event, and just having one RAF would have this code\r\n        // run within the same frame as the triggering input event, and the\r\n        // input event probably already did way too much work for one frame\r\n        raf(function () {\r\n            raf(function () {\r\n                _this._playDomInspect(opts);\r\n            });\r\n        });\r\n    };\r\n    Animator.prototype.playAsync = function (opts) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.onFinish(resolve, { oneTimeCallback: true, clearExistingCallbacks: true });\r\n            _this.play(opts);\r\n            return _this;\r\n        });\r\n    };\r\n    Animator.prototype.playSync = function () {\r\n        // If the animation was already invalidated (it did finish), do nothing\r\n        if (!this._destroyed) {\r\n            var opts = { duration: 0 };\r\n            this._isAsync = false;\r\n            this._clearAsync();\r\n            this._playInit(opts);\r\n            this._playDomInspect(opts);\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._playInit = function (opts) {\r\n        // always default that an animation does not tween\r\n        // a tween requires that an Animation class has an element\r\n        // and that it has at least one FROM/TO effect\r\n        // and that the FROM/TO effect can tween numeric values\r\n        this._hasTweenEffect = false;\r\n        this.isPlaying = true;\r\n        this.hasCompleted = false;\r\n        this._hasDur = (this.getDuration(opts) > DURATION_MIN);\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\r\n                var child = children_1[_i];\r\n                // ******** DOM WRITE ****************\r\n                child._playInit(opts);\r\n            }\r\n        }\r\n        if (this._hasDur) {\r\n            // if there is a duration then we want to start at step 0\r\n            // ******** DOM WRITE ****************\r\n            this._progress(0);\r\n            // add the will-change properties\r\n            // ******** DOM WRITE ****************\r\n            this._willChange(true);\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     * ROOT ANIMATION\r\n     */\r\n    Animator.prototype._playDomInspect = function (opts) {\r\n        var _this = this;\r\n        // fire off all the \"before\" function that have DOM READS in them\r\n        // elements will be in the DOM, however visibily hidden\r\n        // so we can read their dimensions if need be\r\n        // ******** DOM READ ****************\r\n        // ******** DOM WRITE ****************\r\n        this._beforeAnimation();\r\n        // for the root animation only\r\n        // set the async TRANSITION END event\r\n        // and run onFinishes when the transition ends\r\n        var dur = this.getDuration(opts);\r\n        if (this._isAsync) {\r\n            this._asyncEnd(dur, true);\r\n        }\r\n        // ******** DOM WRITE ****************\r\n        this._playProgress(opts);\r\n        if (this._isAsync && !this._destroyed) {\r\n            // this animation has a duration so we need another RAF\r\n            // for the CSS TRANSITION properties to kick in\r\n            raf(function () {\r\n                _this._playToStep(1);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._playProgress = function (opts) {\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_2 = children; _i < children_2.length; _i++) {\r\n                var child = children_2[_i];\r\n                // ******** DOM WRITE ****************\r\n                child._playProgress(opts);\r\n            }\r\n        }\r\n        if (this._hasDur) {\r\n            // set the CSS TRANSITION duration/easing\r\n            // ******** DOM WRITE ****************\r\n            this._setTrans(this.getDuration(opts), false);\r\n        }\r\n        else {\r\n            // this animation does not have a duration, so it should not animate\r\n            // just go straight to the TO properties and call it done\r\n            // ******** DOM WRITE ****************\r\n            this._progress(1);\r\n            // since there was no animation, immediately run the after\r\n            // ******** DOM WRITE ****************\r\n            this._setAfterStyles();\r\n            // this animation has no duration, so it has finished\r\n            // other animations could still be running\r\n            this._didFinish(true);\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._playToStep = function (stepValue) {\r\n        if (!this._destroyed) {\r\n            var children = this._childAnimations;\r\n            if (children) {\r\n                for (var _i = 0, children_3 = children; _i < children_3.length; _i++) {\r\n                    var child = children_3[_i];\r\n                    // ******** DOM WRITE ****************\r\n                    child._playToStep(stepValue);\r\n                }\r\n            }\r\n            if (this._hasDur) {\r\n                // browser had some time to render everything in place\r\n                // and the transition duration/easing is set\r\n                // now set the TO properties which will trigger the transition to begin\r\n                // ******** DOM WRITE ****************\r\n                this._progress(stepValue);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     * ROOT ANIMATION\r\n     */\r\n    Animator.prototype._asyncEnd = function (dur, shouldComplete) {\r\n        var self = this;\r\n        var onTransitionEnd = function () {\r\n            // congrats! a successful transition completed!\r\n            // ensure transition end events and timeouts have been cleared\r\n            self._clearAsync();\r\n            // ******** DOM WRITE ****************\r\n            self._playEnd();\r\n            // transition finished\r\n            self._didFinishAll(shouldComplete, true, false);\r\n        };\r\n        var onTransitionFallback = function () {\r\n            // oh noz! the transition end event didn't fire in time!\r\n            // instead the fallback timer when first\r\n            // if all goes well this fallback should never fire\r\n            // clear the other async end events from firing\r\n            self._timerId = undefined;\r\n            self._clearAsync();\r\n            // set the after styles\r\n            // ******** DOM WRITE ****************\r\n            self._playEnd(shouldComplete ? 1 : 0);\r\n            // transition finished\r\n            self._didFinishAll(shouldComplete, true, false);\r\n        };\r\n        // set the TRANSITION END event on one of the transition elements\r\n        self._unregisterTrnsEnd = transitionEnd(self._transEl(), onTransitionEnd);\r\n        // set a fallback timeout if the transition end event never fires, or is too slow\r\n        // transition end fallback: (animation duration + XXms)\r\n        self._timerId = setTimeout(onTransitionFallback, (dur + TRANSITION_END_FALLBACK_PADDING_MS));\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._playEnd = function (stepValue) {\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_4 = children; _i < children_4.length; _i++) {\r\n                var child = children_4[_i];\r\n                // ******** DOM WRITE ****************\r\n                child._playEnd(stepValue);\r\n            }\r\n        }\r\n        if (this._hasDur) {\r\n            if (stepValue !== undefined) {\r\n                // too late to have a smooth animation, just finish it\r\n                // ******** DOM WRITE ****************\r\n                this._setTrans(0, true);\r\n                // ensure the ending progress step gets rendered\r\n                // ******** DOM WRITE ****************\r\n                this._progress(stepValue);\r\n            }\r\n            // set the after styles\r\n            // ******** DOM WRITE ****************\r\n            this._setAfterStyles();\r\n            // remove the will-change properties\r\n            // ******** DOM WRITE ****************\r\n            this._willChange(false);\r\n        }\r\n    };\r\n    /**\r\n     * NO DOM\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._hasDuration = function (opts) {\r\n        if (this.getDuration(opts) > DURATION_MIN) {\r\n            return true;\r\n        }\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_5 = children; _i < children_5.length; _i++) {\r\n                var child = children_5[_i];\r\n                if (child._hasDuration(opts)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * NO DOM\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._hasDomReads = function () {\r\n        if (this._readCallbacks && this._readCallbacks.length > 0) {\r\n            return true;\r\n        }\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_6 = children; _i < children_6.length; _i++) {\r\n                var child = children_6[_i];\r\n                if (child._hasDomReads()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Immediately stop at the end of the animation.\r\n     */\r\n    Animator.prototype.stop = function (stepValue) {\r\n        if (stepValue === void 0) { stepValue = 1; }\r\n        // ensure all past transition end events have been cleared\r\n        this._clearAsync();\r\n        this._hasDur = true;\r\n        this._playEnd(stepValue);\r\n    };\r\n    /**\r\n     * NO DOM\r\n     * NO RECURSION\r\n     */\r\n    Animator.prototype._clearAsync = function () {\r\n        if (this._unregisterTrnsEnd) {\r\n            this._unregisterTrnsEnd();\r\n        }\r\n        if (this._timerId) {\r\n            clearTimeout(this._timerId);\r\n        }\r\n        this._timerId = this._unregisterTrnsEnd = undefined;\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     */\r\n    Animator.prototype._progress = function (stepValue) {\r\n        // bread 'n butter\r\n        var val;\r\n        var elements = this._elements;\r\n        var effects = this._fxProperties;\r\n        if (!elements || elements.length === 0 || !effects || this._destroyed) {\r\n            return;\r\n        }\r\n        // flip the number if we're going in reverse\r\n        if (this._isReverse) {\r\n            stepValue = 1 - stepValue;\r\n        }\r\n        var i = 0;\r\n        var j = 0;\r\n        var finalTransform = '';\r\n        var fx;\r\n        for (i = 0; i < effects.length; i++) {\r\n            fx = effects[i];\r\n            if (fx.from && fx.to) {\r\n                var fromNum = fx.from.num;\r\n                var toNum = fx.to.num;\r\n                var tweenEffect = (fromNum !== toNum);\r\n                if (tweenEffect) {\r\n                    this._hasTweenEffect = true;\r\n                }\r\n                if (stepValue === 0) {\r\n                    // FROM\r\n                    val = fx.from.val;\r\n                }\r\n                else if (stepValue === 1) {\r\n                    // TO\r\n                    val = fx.to.val;\r\n                }\r\n                else if (tweenEffect) {\r\n                    // EVERYTHING IN BETWEEN\r\n                    var valNum = (((toNum - fromNum) * stepValue) + fromNum);\r\n                    var unit = fx.to.effectUnit;\r\n                    val = valNum + unit;\r\n                }\r\n                if (val !== null) {\r\n                    var prop = fx.effectName;\r\n                    if (fx.trans) {\r\n                        finalTransform += prop + '(' + val + ') ';\r\n                    }\r\n                    else {\r\n                        for (j = 0; j < elements.length; j++) {\r\n                            // ******** DOM WRITE ****************\r\n                            elements[j].style.setProperty(prop, val);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // place all transforms on the same property\r\n        if (finalTransform.length > 0) {\r\n            if (!this._isReverse && stepValue !== 1 || this._isReverse && stepValue !== 0) {\r\n                finalTransform += 'translateZ(0px)';\r\n            }\r\n            for (i = 0; i < elements.length; i++) {\r\n                // ******** DOM WRITE ****************\r\n                elements[i].style.setProperty('transform', finalTransform);\r\n                elements[i].style.setProperty('-webkit-transform', finalTransform);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     */\r\n    Animator.prototype._setTrans = function (dur, forcedLinearEasing) {\r\n        // Transition is not enabled if there are not effects\r\n        var elements = this._elements;\r\n        if (!elements || elements.length === 0 || !this._fxProperties) {\r\n            return;\r\n        }\r\n        // set the TRANSITION properties inline on the element\r\n        var easing = (forcedLinearEasing ? 'linear' : this.getEasing());\r\n        var durString = dur + 'ms';\r\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\r\n            var style = elements_1[_i].style;\r\n            if (dur > 0) {\r\n                // ******** DOM WRITE ****************\r\n                style.transitionDuration = durString;\r\n                // each animation can have a different easing\r\n                if (easing !== null) {\r\n                    // ******** DOM WRITE ****************\r\n                    style.transitionTimingFunction = easing;\r\n                }\r\n            }\r\n            else {\r\n                style.transitionDuration = '0';\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * DOM READ\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._beforeAnimation = function () {\r\n        // fire off all the \"before\" function that have DOM READS in them\r\n        // elements will be in the DOM, however visibily hidden\r\n        // so we can read their dimensions if need be\r\n        // ******** DOM READ ****************\r\n        this._fireBeforeReadFunc();\r\n        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************\r\n        // fire off all the \"before\" function that have DOM WRITES in them\r\n        // ******** DOM WRITE ****************\r\n        this._fireBeforeWriteFunc();\r\n        // stage all of the before css classes and inline styles\r\n        // ******** DOM WRITE ****************\r\n        this._setBeforeStyles();\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._setBeforeStyles = function () {\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_7 = children; _i < children_7.length; _i++) {\r\n                var child = children_7[_i];\r\n                child._setBeforeStyles();\r\n            }\r\n        }\r\n        var elements = this._elements;\r\n        // before the animations have started\r\n        // only set before styles if animation is not reversed\r\n        if (!elements || elements.length === 0 || this._isReverse) {\r\n            return;\r\n        }\r\n        var addClasses = this._beforeAddClasses;\r\n        var removeClasses = this._beforeRemoveClasses;\r\n        for (var _a = 0, elements_2 = elements; _a < elements_2.length; _a++) {\r\n            var el = elements_2[_a];\r\n            var elementClassList = el.classList;\r\n            // css classes to add before the animation\r\n            if (addClasses) {\r\n                for (var _b = 0, addClasses_1 = addClasses; _b < addClasses_1.length; _b++) {\r\n                    var c = addClasses_1[_b];\r\n                    // ******** DOM WRITE ****************\r\n                    elementClassList.add(c);\r\n                }\r\n            }\r\n            // css classes to remove before the animation\r\n            if (removeClasses) {\r\n                for (var _c = 0, removeClasses_1 = removeClasses; _c < removeClasses_1.length; _c++) {\r\n                    var c = removeClasses_1[_c];\r\n                    // ******** DOM WRITE ****************\r\n                    elementClassList.remove(c);\r\n                }\r\n            }\r\n            // inline styles to add before the animation\r\n            if (this._beforeStyles) {\r\n                for (var _d = 0, _e = Object.entries(this._beforeStyles); _d < _e.length; _d++) {\r\n                    var _f = _e[_d], key = _f[0], value = _f[1];\r\n                    // ******** DOM WRITE ****************\r\n                    el.style.setProperty(key, value);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * DOM READ\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._fireBeforeReadFunc = function () {\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_8 = children; _i < children_8.length; _i++) {\r\n                var child = children_8[_i];\r\n                // ******** DOM READ ****************\r\n                child._fireBeforeReadFunc();\r\n            }\r\n        }\r\n        var readFunctions = this._readCallbacks;\r\n        if (readFunctions) {\r\n            for (var _a = 0, readFunctions_1 = readFunctions; _a < readFunctions_1.length; _a++) {\r\n                var callback = readFunctions_1[_a];\r\n                // ******** DOM READ ****************\r\n                callback();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._fireBeforeWriteFunc = function () {\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_9 = children; _i < children_9.length; _i++) {\r\n                var child = children_9[_i];\r\n                // ******** DOM WRITE ****************\r\n                child._fireBeforeWriteFunc();\r\n            }\r\n        }\r\n        var writeFunctions = this._writeCallbacks;\r\n        if (writeFunctions) {\r\n            for (var _a = 0, writeFunctions_1 = writeFunctions; _a < writeFunctions_1.length; _a++) {\r\n                var callback = writeFunctions_1[_a];\r\n                // ******** DOM WRITE ****************\r\n                callback();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    Animator.prototype._setAfterStyles = function () {\r\n        var elements = this._elements;\r\n        if (!elements) {\r\n            return;\r\n        }\r\n        for (var _i = 0, elements_3 = elements; _i < elements_3.length; _i++) {\r\n            var el = elements_3[_i];\r\n            var elementClassList = el.classList;\r\n            // remove the transition duration/easing\r\n            // ******** DOM WRITE ****************\r\n            el.style.transitionDuration = el.style.transitionTimingFunction = '';\r\n            if (this._isReverse) {\r\n                // finished in reverse direction\r\n                // css classes that were added before the animation should be removed\r\n                var beforeAddClasses = this._beforeAddClasses;\r\n                if (beforeAddClasses) {\r\n                    for (var _a = 0, beforeAddClasses_1 = beforeAddClasses; _a < beforeAddClasses_1.length; _a++) {\r\n                        var c = beforeAddClasses_1[_a];\r\n                        elementClassList.remove(c);\r\n                    }\r\n                }\r\n                // css classes that were removed before the animation should be added\r\n                var beforeRemoveClasses = this._beforeRemoveClasses;\r\n                if (beforeRemoveClasses) {\r\n                    for (var _b = 0, beforeRemoveClasses_1 = beforeRemoveClasses; _b < beforeRemoveClasses_1.length; _b++) {\r\n                        var c = beforeRemoveClasses_1[_b];\r\n                        elementClassList.add(c);\r\n                    }\r\n                }\r\n                // inline styles that were added before the animation should be removed\r\n                var beforeStyles = this._beforeStyles;\r\n                if (beforeStyles) {\r\n                    for (var _c = 0, _d = Object.keys(beforeStyles); _c < _d.length; _c++) {\r\n                        var propName = _d[_c];\r\n                        // ******** DOM WRITE ****************\r\n                        el.style.removeProperty(propName);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // finished in forward direction\r\n                // css classes to add after the animation\r\n                var afterAddClasses = this._afterAddClasses;\r\n                if (afterAddClasses) {\r\n                    for (var _e = 0, afterAddClasses_1 = afterAddClasses; _e < afterAddClasses_1.length; _e++) {\r\n                        var c = afterAddClasses_1[_e];\r\n                        // ******** DOM WRITE ****************\r\n                        elementClassList.add(c);\r\n                    }\r\n                }\r\n                // css classes to remove after the animation\r\n                var afterRemoveClasses = this._afterRemoveClasses;\r\n                if (afterRemoveClasses) {\r\n                    for (var _f = 0, afterRemoveClasses_1 = afterRemoveClasses; _f < afterRemoveClasses_1.length; _f++) {\r\n                        var c = afterRemoveClasses_1[_f];\r\n                        // ******** DOM WRITE ****************\r\n                        elementClassList.remove(c);\r\n                    }\r\n                }\r\n                // inline styles to add after the animation\r\n                var afterStyles = this._afterStyles;\r\n                if (afterStyles) {\r\n                    for (var _g = 0, _h = Object.entries(afterStyles); _g < _h.length; _g++) {\r\n                        var _j = _h[_g], key = _j[0], value = _j[1];\r\n                        el.style.setProperty(key, value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * NO RECURSION\r\n     */\r\n    Animator.prototype._willChange = function (addWillChange) {\r\n        var wc;\r\n        var effects = this._fxProperties;\r\n        var willChange;\r\n        if (addWillChange && effects) {\r\n            wc = [];\r\n            for (var _i = 0, effects_1 = effects; _i < effects_1.length; _i++) {\r\n                var effect = effects_1[_i];\r\n                var propWC = effect.wc;\r\n                if (propWC === 'webkitTransform') {\r\n                    wc.push('transform', '-webkit-transform');\r\n                }\r\n                else if (propWC !== undefined) {\r\n                    wc.push(propWC);\r\n                }\r\n            }\r\n            willChange = wc.join(',');\r\n        }\r\n        else {\r\n            willChange = '';\r\n        }\r\n        var elements = this._elements;\r\n        if (elements) {\r\n            for (var _a = 0, elements_4 = elements; _a < elements_4.length; _a++) {\r\n                var el = elements_4[_a];\r\n                // ******** DOM WRITE ****************\r\n                el.style.setProperty('will-change', willChange);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Start the animation with a user controlled progress.\r\n     */\r\n    Animator.prototype.progressStart = function () {\r\n        // ensure all past transition end events have been cleared\r\n        this._clearAsync();\r\n        // ******** DOM READ/WRITE ****************\r\n        this._beforeAnimation();\r\n        // ******** DOM WRITE ****************\r\n        this._progressStart();\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._progressStart = function () {\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_10 = children; _i < children_10.length; _i++) {\r\n                var child = children_10[_i];\r\n                // ******** DOM WRITE ****************\r\n                child._progressStart();\r\n            }\r\n        }\r\n        // force no duration, linear easing\r\n        // ******** DOM WRITE ****************\r\n        this._setTrans(0, true);\r\n        // ******** DOM WRITE ****************\r\n        this._willChange(true);\r\n    };\r\n    /**\r\n     * Set the progress step for this animation.\r\n     * progressStep() is not debounced, so it should not be called faster than 60FPS.\r\n     */\r\n    Animator.prototype.progressStep = function (stepValue) {\r\n        // only update if the last update was more than 16ms ago\r\n        stepValue = Math.min(1, Math.max(0, stepValue));\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_11 = children; _i < children_11.length; _i++) {\r\n                var child = children_11[_i];\r\n                // ******** DOM WRITE ****************\r\n                child.progressStep(stepValue);\r\n            }\r\n        }\r\n        // ******** DOM WRITE ****************\r\n        this._progress(stepValue);\r\n    };\r\n    /**\r\n     * End the progress animation.\r\n     */\r\n    Animator.prototype.progressEnd = function (shouldComplete, currentStepValue, dur) {\r\n        var _this = this;\r\n        if (dur === void 0) { dur = -1; }\r\n        if (this._isReverse) {\r\n            // if the animation is going in reverse then\r\n            // flip the step value: 0 becomes 1, 1 becomes 0\r\n            currentStepValue = 1 - currentStepValue;\r\n        }\r\n        var stepValue = shouldComplete ? 1 : 0;\r\n        var diff = Math.abs(currentStepValue - stepValue);\r\n        if (dur < 0) {\r\n            dur = this._duration || 0;\r\n        }\r\n        else if (diff < 0.05) {\r\n            dur = 0;\r\n        }\r\n        this._isAsync = (dur > 30);\r\n        this._progressEnd(shouldComplete, stepValue, dur, this._isAsync);\r\n        if (this._isAsync) {\r\n            // for the root animation only\r\n            // set the async TRANSITION END event\r\n            // and run onFinishes when the transition ends\r\n            // ******** DOM WRITE ****************\r\n            this._asyncEnd(dur, shouldComplete);\r\n            // this animation has a duration so we need another RAF\r\n            // for the CSS TRANSITION properties to kick in\r\n            if (!this._destroyed) {\r\n                raf(function () {\r\n                    _this._playToStep(stepValue);\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._progressEnd = function (shouldComplete, stepValue, dur, isAsync) {\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_12 = children; _i < children_12.length; _i++) {\r\n                var child = children_12[_i];\r\n                // ******** DOM WRITE ****************\r\n                child._progressEnd(shouldComplete, stepValue, dur, isAsync);\r\n            }\r\n        }\r\n        if (!isAsync) {\r\n            // stop immediately\r\n            // set all the animations to their final position\r\n            // ******** DOM WRITE ****************\r\n            this._progress(stepValue);\r\n            this._willChange(false);\r\n            this._setAfterStyles();\r\n            this._didFinish(shouldComplete);\r\n        }\r\n        else {\r\n            // animate it back to it's ending position\r\n            this.isPlaying = true;\r\n            this.hasCompleted = false;\r\n            this._hasDur = true;\r\n            // ******** DOM WRITE ****************\r\n            this._willChange(true);\r\n            this._setTrans(dur, false);\r\n        }\r\n    };\r\n    /**\r\n     * Add a callback to fire when the animation has finished.\r\n     */\r\n    Animator.prototype.onFinish = function (callback, opts) {\r\n        if (opts && opts.clearExistingCallbacks) {\r\n            this._onFinishCallbacks = this._onFinishOneTimeCallbacks = undefined;\r\n        }\r\n        if (opts && opts.oneTimeCallback) {\r\n            this._onFinishOneTimeCallbacks = this._onFinishOneTimeCallbacks || [];\r\n            this._onFinishOneTimeCallbacks.push(callback);\r\n        }\r\n        else {\r\n            this._onFinishCallbacks = this._onFinishCallbacks || [];\r\n            this._onFinishCallbacks.push(callback);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * NO DOM\r\n     * RECURSION\r\n     */\r\n    Animator.prototype._didFinishAll = function (hasCompleted, finishAsyncAnimations, finishNoDurationAnimations) {\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_13 = children; _i < children_13.length; _i++) {\r\n                var child = children_13[_i];\r\n                child._didFinishAll(hasCompleted, finishAsyncAnimations, finishNoDurationAnimations);\r\n            }\r\n        }\r\n        if (finishAsyncAnimations && this._isAsync || finishNoDurationAnimations && !this._isAsync) {\r\n            this._didFinish(hasCompleted);\r\n        }\r\n    };\r\n    /**\r\n     * NO RECURSION\r\n     */\r\n    Animator.prototype._didFinish = function (hasCompleted) {\r\n        this.isPlaying = false;\r\n        this.hasCompleted = hasCompleted;\r\n        if (this._onFinishCallbacks) {\r\n            // run all finish callbacks\r\n            for (var _i = 0, _a = this._onFinishCallbacks; _i < _a.length; _i++) {\r\n                var callback = _a[_i];\r\n                callback(this);\r\n            }\r\n        }\r\n        if (this._onFinishOneTimeCallbacks) {\r\n            // run all \"onetime\" finish callbacks\r\n            for (var _b = 0, _c = this._onFinishOneTimeCallbacks; _b < _c.length; _b++) {\r\n                var callback = _c[_b];\r\n                callback(this);\r\n            }\r\n            this._onFinishOneTimeCallbacks.length = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Reverse the animation.\r\n     */\r\n    Animator.prototype.reverse = function (shouldReverse) {\r\n        if (shouldReverse === void 0) { shouldReverse = true; }\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_14 = children; _i < children_14.length; _i++) {\r\n                var child = children_14[_i];\r\n                child.reverse(shouldReverse);\r\n            }\r\n        }\r\n        this._isReverse = !!shouldReverse;\r\n        return this;\r\n    };\r\n    /**\r\n     * Recursively destroy this animation and all child animations.\r\n     */\r\n    Animator.prototype.destroy = function () {\r\n        this._didFinish(false);\r\n        this._destroyed = true;\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_15 = children; _i < children_15.length; _i++) {\r\n                var child = children_15[_i];\r\n                child.destroy();\r\n            }\r\n        }\r\n        this._clearAsync();\r\n        if (this._elements) {\r\n            this._elements.length = 0;\r\n        }\r\n        if (this._readCallbacks) {\r\n            this._readCallbacks.length = 0;\r\n        }\r\n        if (this._writeCallbacks) {\r\n            this._writeCallbacks.length = 0;\r\n        }\r\n        this.parent = undefined;\r\n        if (this._childAnimations) {\r\n            this._childAnimations.length = 0;\r\n        }\r\n        if (this._onFinishCallbacks) {\r\n            this._onFinishCallbacks.length = 0;\r\n        }\r\n        if (this._onFinishOneTimeCallbacks) {\r\n            this._onFinishOneTimeCallbacks.length = 0;\r\n        }\r\n    };\r\n    /**\r\n     * NO DOM\r\n     */\r\n    Animator.prototype._transEl = function () {\r\n        // get the lowest level element that has an Animator\r\n        var children = this._childAnimations;\r\n        if (children) {\r\n            for (var _i = 0, children_16 = children; _i < children_16.length; _i++) {\r\n                var child = children_16[_i];\r\n                var targetEl = child._transEl();\r\n                if (targetEl) {\r\n                    return targetEl;\r\n                }\r\n            }\r\n        }\r\n        return (this._hasTweenEffect &&\r\n            this._hasDur &&\r\n            this._elements !== undefined &&\r\n            this._elements.length > 0 ?\r\n            this._elements[0] : null);\r\n    };\r\n    return Animator;\r\n}());\r\nvar create = function (animationBuilder, baseEl, opts) {\r\n    if (animationBuilder) {\r\n        return animationBuilder(Animator, baseEl, opts);\r\n    }\r\n    return Promise.resolve(new Animator());\r\n};\r\nexport { create };\r\n"],"sourceRoot":""}