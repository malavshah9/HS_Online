{"version":3,"sources":["./node_modules/@ionic/core/dist/esm-es5/ion-nav_5.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC4F;AAC1E;AACuE;AACtE;AACoB;AACkB;AACJ;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,yEAAe;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB,mBAAmB,EAAE;AACjD;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAW;AACzC,gCAAgC,2DAAW;AAC3C,+BAA+B,2DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2DAAU;AACjC,gCAAgC,qDAAM;AACtC;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,6CAA6C,+NAAkC;AAC/E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,yCAAyC,gBAAgB;AACzD;AACA,YAAY,4DAAS,eAAe,wDAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0CAA0C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gDAAgD,sBAAsB,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA,kDAAkD,mBAAmB,EAAE;AACvE;AACA;AACA;AACA,8CAA8C,QAAQ,+CAAiB;AACvE,+BAA+B,iDAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB,EAAE;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,+BAA+B,EAAE;AAChG;AACA,oEAAoE,eAAe,oBAAoB;AACvG;AACA;AACA;AACA;AACA;AACA,kEAAkE,eAAe,oCAAoC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6BAA6B;AAC3D;AACA;AACA;AACA,8BAA8B,6BAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAM;AAClB,YAAY,8DAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA,6DAA6D,+BAA+B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd,QAAQ,8DAAM;AACd,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAM;AAClB,YAAY,8DAAM;AAClB;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,2BAA2B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,4BAA4B;AACvF;AACA,gBAAgB,4DAAS,eAAe,wDAAoB;AAC5D,gBAAgB,4DAAS,eAAe,wDAAmB;AAC3D,gBAAgB,4DAAS,eAAe,wDAAqB;AAC7D;AACA;AACA,2DAA2D,4BAA4B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,8CAA8C,0BAA0B;AACxE;AACA,+BAA+B,2DAAU;AACzC;AACA;AACA,uDAAuD,yIAAyI,qDAAM,qFAAqF,qDAAM;AACjS,kDAAkD;AAClD,6CAA6C,4DAAU;AACvD;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAM;AAClB;AACA;AACA;AACA,YAAY,8DAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAS,UAAU,wDAAqB;AACxD;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,GAAG,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAuB,KAAK,2DAAK,YAAY,2DAAK,YAAY,2DAAK,kBAAkB,2DAAK;AAC1H;AACA;AACA,gCAAgC,mEAAuB,KAAK,2DAAK,YAAY,2DAAK,kBAAkB,2DAAK,YAAY,2DAAK;AAC1H;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC;AACjB;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,0BAA0B,eAAe,OAAO,QAAQ,MAAM,SAAS,kBAAkB,0BAA0B,gBAAgB,UAAU,EAAE,EAAE;AACjJ;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA,+DAA+D,mBAAmB;AAClF;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,wBAAwB;AACjD;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,oBAAoB;AAC7C;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,qBAAqB;AAC9C;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,wBAAwB;AACjD;AACA;AACA,0BAA0B,QAAQ,2DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA,CAAC;AACkI","file":"43-es5.js","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport { r as registerInstance, c as createEvent, d as getIonMode, h, e as getElement, H as Host } from './core-c02a05e9.js';\r\nimport { b as config } from './config-503c2549.js';\r\nimport { d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './constants-94c4865f.js';\r\nimport { b as assert } from './helpers-c90aaa66.js';\r\nimport { a as attachComponent } from './framework-delegate-00265c49.js';\r\nimport { l as lifecycle, t as transition, s as setPageHidden } from './index-a15151df.js';\r\nimport { g as getTimeGivenProgression, P as Point } from './cubic-bezier-90d0df24.js';\r\nvar VIEW_STATE_NEW = 1;\r\nvar VIEW_STATE_ATTACHED = 2;\r\nvar VIEW_STATE_DESTROYED = 3;\r\nvar ViewController = /** @class */ (function () {\r\n    function ViewController(component, params) {\r\n        this.component = component;\r\n        this.params = params;\r\n        this.state = VIEW_STATE_NEW;\r\n    }\r\n    ViewController.prototype.init = function (container) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var component, _a;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.state = VIEW_STATE_ATTACHED;\r\n                        if (!!this.element) return [3 /*break*/, 2];\r\n                        component = this.component;\r\n                        _a = this;\r\n                        return [4 /*yield*/, attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params)];\r\n                    case 1:\r\n                        _a.element = _b.sent();\r\n                        _b.label = 2;\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    ViewController.prototype._destroy = function () {\r\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n        var element = this.element;\r\n        if (element) {\r\n            if (this.delegate) {\r\n                this.delegate.removeViewFromDom(element.parentElement, element);\r\n            }\r\n            else {\r\n                element.remove();\r\n            }\r\n        }\r\n        this.nav = undefined;\r\n        this.state = VIEW_STATE_DESTROYED;\r\n    };\r\n    return ViewController;\r\n}());\r\nvar matches = function (view, id, params) {\r\n    if (!view) {\r\n        return false;\r\n    }\r\n    if (view.component !== id) {\r\n        return false;\r\n    }\r\n    var currentParams = view.params;\r\n    if (currentParams === params) {\r\n        return true;\r\n    }\r\n    if (!currentParams && !params) {\r\n        return true;\r\n    }\r\n    if (!currentParams || !params) {\r\n        return false;\r\n    }\r\n    var keysA = Object.keys(currentParams);\r\n    var keysB = Object.keys(params);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n    // Test for A's keys different from B.\r\n    for (var _i = 0, keysA_1 = keysA; _i < keysA_1.length; _i++) {\r\n        var key = keysA_1[_i];\r\n        if (currentParams[key] !== params[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nvar convertToView = function (page, params) {\r\n    if (!page) {\r\n        return null;\r\n    }\r\n    if (page instanceof ViewController) {\r\n        return page;\r\n    }\r\n    return new ViewController(page, params);\r\n};\r\nvar convertToViews = function (pages) {\r\n    return pages.map(function (page) {\r\n        if (page instanceof ViewController) {\r\n            return page;\r\n        }\r\n        if ('page' in page) {\r\n            return convertToView(page.page, page.params);\r\n        }\r\n        return convertToView(page, undefined);\r\n    }).filter(function (v) { return v !== null; });\r\n};\r\nvar Nav = /** @class */ (function () {\r\n    function class_1(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.transInstr = [];\r\n        this.animationEnabled = true;\r\n        this.useRouter = false;\r\n        this.isTransitioning = false;\r\n        this.destroyed = false;\r\n        this.views = [];\r\n        /**\r\n         * If `true`, the nav should animate the transition of components.\r\n         */\r\n        this.animated = true;\r\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\r\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\r\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\r\n    }\r\n    class_1.prototype.swipeGestureChanged = function () {\r\n        if (this.gesture) {\r\n            this.gesture.setDisabled(this.swipeGesture !== true);\r\n        }\r\n    };\r\n    class_1.prototype.rootChanged = function () {\r\n        if (this.root !== undefined) {\r\n            if (!this.useRouter) {\r\n                this.setRoot(this.root, this.rootParams);\r\n            }\r\n        }\r\n    };\r\n    class_1.prototype.componentWillLoad = function () {\r\n        this.useRouter =\r\n            !!document.querySelector('ion-router') &&\r\n                !this.el.closest('[no-router]');\r\n        if (this.swipeGesture === undefined) {\r\n            var mode = getIonMode(this);\r\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\r\n        }\r\n        this.ionNavWillLoad.emit();\r\n    };\r\n    class_1.prototype.componentDidLoad = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.rootChanged();\r\n                        _a = this;\r\n                        return [4 /*yield*/, import('./swipe-back-dc1b83c2.js')];\r\n                    case 1:\r\n                        _a.gesture = (_b.sent()).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\r\n                        this.swipeGestureChanged();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    class_1.prototype.componentDidUnload = function () {\r\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\r\n            var view = _a[_i];\r\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n            view._destroy();\r\n        }\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n        // release swipe back gesture and transition\r\n        this.transInstr.length = this.views.length = 0;\r\n        this.destroyed = true;\r\n    };\r\n    /**\r\n     * Push a new component onto the current navigation stack. Pass any additional\r\n     * information along as an object. This additional information is accessible\r\n     * through NavParams.\r\n     *\r\n     * @param component The component to push onto the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.push = function (component, componentProps, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: -1,\r\n            insertViews: [{ page: component, params: componentProps }],\r\n            opts: opts\r\n        }, done);\r\n    };\r\n    /**\r\n     * Inserts a component into the navigation stack at the specified index.\r\n     * This is useful to add a component at any point in the navigation stack.\r\n     *\r\n     * @param insertIndex The index to insert the component at in the stack.\r\n     * @param component The component to insert into the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.insert = function (insertIndex, component, componentProps, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: insertIndex,\r\n            insertViews: [{ page: component, params: componentProps }],\r\n            opts: opts\r\n        }, done);\r\n    };\r\n    /**\r\n     * Inserts an array of components into the navigation stack at the specified index.\r\n     * The last component in the array will become instantiated as a view, and animate\r\n     * in to become the active view.\r\n     *\r\n     * @param insertIndex The index to insert the components at in the stack.\r\n     * @param insertComponents The components to insert into the navigation stack.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.insertPages = function (insertIndex, insertComponents, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: insertIndex,\r\n            insertViews: insertComponents,\r\n            opts: opts\r\n        }, done);\r\n    };\r\n    /**\r\n     * Pop a component off of the navigation stack. Navigates back from the current\r\n     * component.\r\n     *\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.pop = function (opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: -1,\r\n            removeCount: 1,\r\n            opts: opts\r\n        }, done);\r\n    };\r\n    /**\r\n     * Pop to a specific index in the navigation stack.\r\n     *\r\n     * @param indexOrViewCtrl The index or view controller to pop to.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.popTo = function (indexOrViewCtrl, opts, done) {\r\n        var tiConfig = {\r\n            removeStart: -1,\r\n            removeCount: -1,\r\n            opts: opts\r\n        };\r\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\r\n            tiConfig.removeView = indexOrViewCtrl;\r\n            tiConfig.removeStart = 1;\r\n        }\r\n        else if (typeof indexOrViewCtrl === 'number') {\r\n            tiConfig.removeStart = indexOrViewCtrl + 1;\r\n        }\r\n        return this.queueTrns(tiConfig, done);\r\n    };\r\n    /**\r\n     * Navigate back to the root of the stack, no matter how far back that is.\r\n     *\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.popToRoot = function (opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: 1,\r\n            removeCount: -1,\r\n            opts: opts\r\n        }, done);\r\n    };\r\n    /**\r\n     * Removes a component from the navigation stack at the specified index.\r\n     *\r\n     * @param startIndex The number to begin removal at.\r\n     * @param removeCount The number of components to remove.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.removeIndex = function (startIndex, removeCount, opts, done) {\r\n        if (removeCount === void 0) { removeCount = 1; }\r\n        return this.queueTrns({\r\n            removeStart: startIndex,\r\n            removeCount: removeCount,\r\n            opts: opts\r\n        }, done);\r\n    };\r\n    /**\r\n     * Set the root for the current navigation stack to a component.\r\n     *\r\n     * @param component The component to set as the root of the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.setRoot = function (component, componentProps, opts, done) {\r\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\r\n    };\r\n    /**\r\n     * Set the views of the current navigation stack and navigate to the last view.\r\n     * By default animations are disabled, but they can be enabled by passing options\r\n     * to the navigation controller. Navigation parameters can also be passed to the\r\n     * individual pages in the array.\r\n     *\r\n     * @param views The list of views to set as the navigation stack.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    class_1.prototype.setPages = function (views, opts, done) {\r\n        if (opts == null) {\r\n            opts = {};\r\n        }\r\n        // if animation wasn't set to true then default it to NOT animate\r\n        if (opts.animated !== true) {\r\n            opts.animated = false;\r\n        }\r\n        return this.queueTrns({\r\n            insertStart: 0,\r\n            insertViews: views,\r\n            removeStart: 0,\r\n            removeCount: -1,\r\n            opts: opts\r\n        }, done);\r\n    };\r\n    /** @internal */\r\n    class_1.prototype.setRouteId = function (id, params, direction) {\r\n        var _this = this;\r\n        var active = this.getActiveSync();\r\n        if (matches(active, id, params)) {\r\n            return Promise.resolve({\r\n                changed: false,\r\n                element: active.element\r\n            });\r\n        }\r\n        var resolve;\r\n        var promise = new Promise(function (r) { return (resolve = r); });\r\n        var finish;\r\n        var commonOpts = {\r\n            updateURL: false,\r\n            viewIsReady: function (enteringEl) {\r\n                var mark;\r\n                var p = new Promise(function (r) { return (mark = r); });\r\n                resolve({\r\n                    changed: true,\r\n                    element: enteringEl,\r\n                    markVisible: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                        return tslib_1.__generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0:\r\n                                    mark();\r\n                                    return [4 /*yield*/, finish];\r\n                                case 1:\r\n                                    _a.sent();\r\n                                    return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    }); }\r\n                });\r\n                return p;\r\n            }\r\n        };\r\n        if (direction === 'root') {\r\n            finish = this.setRoot(id, params, commonOpts);\r\n        }\r\n        else {\r\n            var viewController = this.views.find(function (v) { return matches(v, id, params); });\r\n            if (viewController) {\r\n                finish = this.popTo(viewController, Object.assign({}, commonOpts, { direction: 'back' }));\r\n            }\r\n            else if (direction === 'forward') {\r\n                finish = this.push(id, params, commonOpts);\r\n            }\r\n            else if (direction === 'back') {\r\n                finish = this.setRoot(id, params, Object.assign({}, commonOpts, { direction: 'back', animated: true }));\r\n            }\r\n        }\r\n        return promise;\r\n    };\r\n    /** @internal */\r\n    class_1.prototype.getRouteId = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var active;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                active = this.getActiveSync();\r\n                return [2 /*return*/, active\r\n                        ? {\r\n                            id: active.element.tagName,\r\n                            params: active.params,\r\n                            element: active.element\r\n                        }\r\n                        : undefined];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get the active view.\r\n     */\r\n    class_1.prototype.getActive = function () {\r\n        return Promise.resolve(this.getActiveSync());\r\n    };\r\n    /**\r\n     * Get the view at the specified index.\r\n     *\r\n     * @param index The index of the view.\r\n     */\r\n    class_1.prototype.getByIndex = function (index) {\r\n        return Promise.resolve(this.views[index]);\r\n    };\r\n    /**\r\n     * Returns `true` if the current view can go back.\r\n     *\r\n     * @param view The view to check.\r\n     */\r\n    class_1.prototype.canGoBack = function (view) {\r\n        return Promise.resolve(this.canGoBackSync(view));\r\n    };\r\n    /**\r\n     * Get the previous view.\r\n     *\r\n     * @param view The view to get.\r\n     */\r\n    class_1.prototype.getPrevious = function (view) {\r\n        return Promise.resolve(this.getPreviousSync(view));\r\n    };\r\n    class_1.prototype.getLength = function () {\r\n        return this.views.length;\r\n    };\r\n    class_1.prototype.getActiveSync = function () {\r\n        return this.views[this.views.length - 1];\r\n    };\r\n    class_1.prototype.canGoBackSync = function (view) {\r\n        if (view === void 0) { view = this.getActiveSync(); }\r\n        return !!(view && this.getPreviousSync(view));\r\n    };\r\n    class_1.prototype.getPreviousSync = function (view) {\r\n        if (view === void 0) { view = this.getActiveSync(); }\r\n        if (!view) {\r\n            return undefined;\r\n        }\r\n        var views = this.views;\r\n        var index = views.indexOf(view);\r\n        return index > 0 ? views[index - 1] : undefined;\r\n    };\r\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\r\n    // 1. _nextTrns(): consumes the next transition in the queue\r\n    // 2. _viewInit(): initializes enteringView if required\r\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\r\n    // 4. _postViewInit(): add/remove the views from the navigation stack\r\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\r\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\r\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\r\n    // 8. _transitionFinish(): called once the transition finishes\r\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\r\n    class_1.prototype.queueTrns = function (ti, done) {\r\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\r\n            return Promise.resolve(false);\r\n        }\r\n        var promise = new Promise(function (resolve, reject) {\r\n            ti.resolve = resolve;\r\n            ti.reject = reject;\r\n        });\r\n        ti.done = done;\r\n        // Normalize empty\r\n        if (ti.insertViews && ti.insertViews.length === 0) {\r\n            ti.insertViews = undefined;\r\n        }\r\n        // Enqueue transition instruction\r\n        this.transInstr.push(ti);\r\n        // if there isn't a transition already happening\r\n        // then this will kick off this transition\r\n        this.nextTrns();\r\n        return promise;\r\n    };\r\n    class_1.prototype.success = function (result, ti) {\r\n        if (this.destroyed) {\r\n            this.fireError('nav controller was destroyed', ti);\r\n            return;\r\n        }\r\n        if (ti.done) {\r\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\r\n        }\r\n        ti.resolve(result.hasCompleted);\r\n        if (ti.opts.updateURL !== false && this.useRouter) {\r\n            var router = document.querySelector('ion-router');\r\n            if (router) {\r\n                var direction = result.direction === 'back' ? 'back' : 'forward';\r\n                router.navChanged(direction);\r\n            }\r\n        }\r\n    };\r\n    class_1.prototype.failed = function (rejectReason, ti) {\r\n        if (this.destroyed) {\r\n            this.fireError('nav controller was destroyed', ti);\r\n            return;\r\n        }\r\n        this.transInstr.length = 0;\r\n        this.fireError(rejectReason, ti);\r\n    };\r\n    class_1.prototype.fireError = function (rejectReason, ti) {\r\n        if (ti.done) {\r\n            ti.done(false, false, rejectReason);\r\n        }\r\n        if (ti.reject && !this.destroyed) {\r\n            ti.reject(rejectReason);\r\n        }\r\n        else {\r\n            ti.resolve(false);\r\n        }\r\n    };\r\n    class_1.prototype.nextTrns = function () {\r\n        // this is the framework's bread 'n butta function\r\n        // only one transition is allowed at any given time\r\n        if (this.isTransitioning) {\r\n            return false;\r\n        }\r\n        // there is no transition happening right now\r\n        // get the next instruction\r\n        var ti = this.transInstr.shift();\r\n        if (!ti) {\r\n            return false;\r\n        }\r\n        this.runTransition(ti);\r\n        return true;\r\n    };\r\n    class_1.prototype.runTransition = function (ti) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var leavingView, enteringView, requiresTransition, result, _a, rejectReason_1;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _b.trys.push([0, 6, , 7]);\r\n                        // set that this nav is actively transitioning\r\n                        this.ionNavWillChange.emit();\r\n                        this.isTransitioning = true;\r\n                        this.prepareTI(ti);\r\n                        leavingView = this.getActiveSync();\r\n                        enteringView = this.getEnteringView(ti, leavingView);\r\n                        if (!leavingView && !enteringView) {\r\n                            throw new Error('no views in the stack to be removed');\r\n                        }\r\n                        if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, enteringView.init(this.el)];\r\n                    case 1:\r\n                        _b.sent();\r\n                        _b.label = 2;\r\n                    case 2:\r\n                        this.postViewInit(enteringView, leavingView, ti);\r\n                        requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\r\n                            enteringView !== leavingView;\r\n                        if (!requiresTransition) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, this.transition(enteringView, leavingView, ti)];\r\n                    case 3:\r\n                        _a = _b.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        _a = {\r\n                            // transition is not required, so we are already done!\r\n                            // they're inserting/removing the views somewhere in the middle or\r\n                            // beginning, so visually nothing needs to animate/transition\r\n                            // resolve immediately because there's no animation that's happening\r\n                            hasCompleted: true,\r\n                            requiresTransition: false\r\n                        };\r\n                        _b.label = 5;\r\n                    case 5:\r\n                        result = _a;\r\n                        this.success(result, ti);\r\n                        this.ionNavDidChange.emit();\r\n                        return [3 /*break*/, 7];\r\n                    case 6:\r\n                        rejectReason_1 = _b.sent();\r\n                        this.failed(rejectReason_1, ti);\r\n                        return [3 /*break*/, 7];\r\n                    case 7:\r\n                        this.isTransitioning = false;\r\n                        this.nextTrns();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    class_1.prototype.prepareTI = function (ti) {\r\n        var viewsLength = this.views.length;\r\n        ti.opts = ti.opts || {};\r\n        if (ti.opts.delegate === undefined) {\r\n            ti.opts.delegate = this.delegate;\r\n        }\r\n        if (ti.removeView !== undefined) {\r\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\r\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\r\n            var index = this.views.indexOf(ti.removeView);\r\n            if (index < 0) {\r\n                throw new Error('removeView was not found');\r\n            }\r\n            ti.removeStart += index;\r\n        }\r\n        if (ti.removeStart !== undefined) {\r\n            if (ti.removeStart < 0) {\r\n                ti.removeStart = viewsLength - 1;\r\n            }\r\n            if (ti.removeCount < 0) {\r\n                ti.removeCount = viewsLength - ti.removeStart;\r\n            }\r\n            ti.leavingRequiresTransition =\r\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\r\n        }\r\n        if (ti.insertViews) {\r\n            // allow -1 to be passed in to auto push it on the end\r\n            // and clean up the index if it's larger then the size of the stack\r\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\r\n                ti.insertStart = viewsLength;\r\n            }\r\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\r\n        }\r\n        var insertViews = ti.insertViews;\r\n        if (!insertViews) {\r\n            return;\r\n        }\r\n        assert(insertViews.length > 0, 'length can not be zero');\r\n        var viewControllers = convertToViews(insertViews);\r\n        if (viewControllers.length === 0) {\r\n            throw new Error('invalid views to insert');\r\n        }\r\n        // Check all the inserted view are correct\r\n        for (var _i = 0, viewControllers_1 = viewControllers; _i < viewControllers_1.length; _i++) {\r\n            var view = viewControllers_1[_i];\r\n            view.delegate = ti.opts.delegate;\r\n            var nav = view.nav;\r\n            if (nav && nav !== this) {\r\n                throw new Error('inserted view was already inserted');\r\n            }\r\n            if (view.state === VIEW_STATE_DESTROYED) {\r\n                throw new Error('inserted view was already destroyed');\r\n            }\r\n        }\r\n        ti.insertViews = viewControllers;\r\n    };\r\n    class_1.prototype.getEnteringView = function (ti, leavingView) {\r\n        var insertViews = ti.insertViews;\r\n        if (insertViews !== undefined) {\r\n            // grab the very last view of the views to be inserted\r\n            // and initialize it as the new entering view\r\n            return insertViews[insertViews.length - 1];\r\n        }\r\n        var removeStart = ti.removeStart;\r\n        if (removeStart !== undefined) {\r\n            var views = this.views;\r\n            var removeEnd = removeStart + ti.removeCount;\r\n            for (var i = views.length - 1; i >= 0; i--) {\r\n                var view = views[i];\r\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\r\n                    return view;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    class_1.prototype.postViewInit = function (enteringView, leavingView, ti) {\r\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\r\n        assert(ti.resolve, 'resolve must be valid');\r\n        assert(ti.reject, 'reject must be valid');\r\n        var opts = ti.opts;\r\n        var insertViews = ti.insertViews;\r\n        var removeStart = ti.removeStart;\r\n        var removeCount = ti.removeCount;\r\n        var destroyQueue;\r\n        // there are views to remove\r\n        if (removeStart !== undefined && removeCount !== undefined) {\r\n            assert(removeStart >= 0, 'removeStart can not be negative');\r\n            assert(removeCount >= 0, 'removeCount can not be negative');\r\n            destroyQueue = [];\r\n            for (var i = 0; i < removeCount; i++) {\r\n                var view = this.views[i + removeStart];\r\n                if (view && view !== enteringView && view !== leavingView) {\r\n                    destroyQueue.push(view);\r\n                }\r\n            }\r\n            // default the direction to \"back\"\r\n            opts.direction = opts.direction || 'back';\r\n        }\r\n        var finalBalance = this.views.length +\r\n            (insertViews !== undefined ? insertViews.length : 0) -\r\n            (removeCount !== undefined ? removeCount : 0);\r\n        assert(finalBalance >= 0, 'final balance can not be negative');\r\n        if (finalBalance === 0) {\r\n            console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\r\n            throw new Error('navigation stack needs at least one root page');\r\n        }\r\n        // At this point the transition can not be rejected, any throw should be an error\r\n        // there are views to insert\r\n        if (insertViews) {\r\n            // add the views to the\r\n            var insertIndex = ti.insertStart;\r\n            for (var _i = 0, insertViews_1 = insertViews; _i < insertViews_1.length; _i++) {\r\n                var view = insertViews_1[_i];\r\n                this.insertViewAt(view, insertIndex);\r\n                insertIndex++;\r\n            }\r\n            if (ti.enteringRequiresTransition) {\r\n                // default to forward if not already set\r\n                opts.direction = opts.direction || 'forward';\r\n            }\r\n        }\r\n        // if the views to be removed are in the beginning or middle\r\n        // and there is not a view that needs to visually transition out\r\n        // then just destroy them and don't transition anything\r\n        // batch all of lifecycles together\r\n        // let's make sure, callbacks are zoned\r\n        if (destroyQueue && destroyQueue.length > 0) {\r\n            for (var _a = 0, destroyQueue_1 = destroyQueue; _a < destroyQueue_1.length; _a++) {\r\n                var view = destroyQueue_1[_a];\r\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\r\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\r\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n            }\r\n            // once all lifecycle events has been delivered, we can safely detroy the views\r\n            for (var _b = 0, destroyQueue_2 = destroyQueue; _b < destroyQueue_2.length; _b++) {\r\n                var view = destroyQueue_2[_b];\r\n                this.destroyView(view);\r\n            }\r\n        }\r\n    };\r\n    class_1.prototype.transition = function (enteringView, leavingView, ti) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, hasCompleted;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        opts = ti.opts;\r\n                        progressCallback = opts.progressAnimation\r\n                            ? function (ani) { return _this.sbAni = ani; }\r\n                            : undefined;\r\n                        mode = getIonMode(this);\r\n                        enteringEl = enteringView.element;\r\n                        leavingEl = leavingView && leavingView.element;\r\n                        animationOpts = Object.assign({ mode: mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback: progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl: enteringEl,\r\n                            leavingEl: leavingEl }, opts);\r\n                        return [4 /*yield*/, transition(animationOpts)];\r\n                    case 1:\r\n                        hasCompleted = (_a.sent()).hasCompleted;\r\n                        return [2 /*return*/, this.transitionFinish(hasCompleted, enteringView, leavingView, opts)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    class_1.prototype.transitionFinish = function (hasCompleted, enteringView, leavingView, opts) {\r\n        var cleanupView = hasCompleted ? enteringView : leavingView;\r\n        if (cleanupView) {\r\n            this.cleanup(cleanupView);\r\n        }\r\n        return {\r\n            hasCompleted: hasCompleted,\r\n            requiresTransition: true,\r\n            enteringView: enteringView,\r\n            leavingView: leavingView,\r\n            direction: opts.direction\r\n        };\r\n    };\r\n    class_1.prototype.insertViewAt = function (view, index) {\r\n        var views = this.views;\r\n        var existingIndex = views.indexOf(view);\r\n        if (existingIndex > -1) {\r\n            // this view is already in the stack!!\r\n            // move it to its new location\r\n            assert(view.nav === this, 'view is not part of the nav');\r\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\r\n        }\r\n        else {\r\n            assert(!view.nav, 'nav is used');\r\n            // this is a new view to add to the stack\r\n            // create the new entering view\r\n            view.nav = this;\r\n            // insert the entering view into the correct index in the stack\r\n            views.splice(index, 0, view);\r\n        }\r\n    };\r\n    class_1.prototype.removeView = function (view) {\r\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\r\n        var views = this.views;\r\n        var index = views.indexOf(view);\r\n        assert(index > -1, 'view must be part of the stack');\r\n        if (index >= 0) {\r\n            views.splice(index, 1);\r\n        }\r\n    };\r\n    class_1.prototype.destroyView = function (view) {\r\n        view._destroy();\r\n        this.removeView(view);\r\n    };\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    class_1.prototype.cleanup = function (activeView) {\r\n        // ok, cleanup time!! Destroy all of the views that are\r\n        // INACTIVE and come after the active view\r\n        // only do this if the views exist, though\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n        var views = this.views;\r\n        var activeViewIndex = views.indexOf(activeView);\r\n        for (var i = views.length - 1; i >= 0; i--) {\r\n            var view = views[i];\r\n            var element = view.element;\r\n            if (i > activeViewIndex) {\r\n                // this view comes after the active view\r\n                // let's unload it\r\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\r\n                this.destroyView(view);\r\n            }\r\n            else if (i < activeViewIndex) {\r\n                // this view comes before the active view\r\n                // and it is not a portal then ensure it is hidden\r\n                setPageHidden(element, true);\r\n            }\r\n        }\r\n    };\r\n    class_1.prototype.canStart = function () {\r\n        return (!!this.swipeGesture &&\r\n            !this.isTransitioning &&\r\n            this.transInstr.length === 0 &&\r\n            this.animationEnabled &&\r\n            this.canGoBackSync());\r\n    };\r\n    class_1.prototype.onStart = function () {\r\n        this.queueTrns({\r\n            removeStart: -1,\r\n            removeCount: 1,\r\n            opts: {\r\n                direction: 'back',\r\n                progressAnimation: true\r\n            }\r\n        }, undefined);\r\n    };\r\n    class_1.prototype.onMove = function (stepValue) {\r\n        if (this.sbAni) {\r\n            this.sbAni.progressStep(stepValue);\r\n        }\r\n    };\r\n    class_1.prototype.onEnd = function (shouldComplete, stepValue, dur) {\r\n        var _this = this;\r\n        if (this.sbAni) {\r\n            this.animationEnabled = false;\r\n            this.sbAni.onFinish(function () {\r\n                _this.animationEnabled = true;\r\n            }, { oneTimeCallback: true });\r\n            // Account for rounding errors in JS\r\n            var newStepValue = (shouldComplete) ? -0.001 : 0.001;\r\n            /**\r\n             * Animation will be reversed here, so need to\r\n             * reverse the easing curve as well\r\n             *\r\n             * Additionally, we need to account for the time relative\r\n             * to the new easing curve, as `stepValue` is going to be given\r\n             * in terms of a linear curve.\r\n             */\r\n            if (!shouldComplete) {\r\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\r\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(1, 0), new Point(0.68, 0.28), new Point(1, 1), stepValue);\r\n            }\r\n            else {\r\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(0.32, 0.72), new Point(0, 1), new Point(1, 1), stepValue);\r\n            }\r\n            this.sbAni.progressEnd(shouldComplete, newStepValue, dur);\r\n        }\r\n    };\r\n    class_1.prototype.render = function () {\r\n        return (h(\"slot\", null));\r\n    };\r\n    Object.defineProperty(class_1.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(class_1, \"watchers\", {\r\n        get: function () {\r\n            return {\r\n                \"swipeGesture\": [\"swipeGestureChanged\"],\r\n                \"root\": [\"rootChanged\"]\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(class_1, \"style\", {\r\n        get: function () { return \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_1;\r\n}());\r\nvar navLink = function (el, routerDirection, component, componentProps) {\r\n    var nav = el.closest('ion-nav');\r\n    if (nav) {\r\n        if (routerDirection === 'forward') {\r\n            if (component !== undefined) {\r\n                return nav.push(component, componentProps, { skipIfBusy: true });\r\n            }\r\n        }\r\n        else if (routerDirection === 'root') {\r\n            if (component !== undefined) {\r\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\r\n            }\r\n        }\r\n        else if (routerDirection === 'back') {\r\n            return nav.pop({ skipIfBusy: true });\r\n        }\r\n    }\r\n    return Promise.resolve(false);\r\n};\r\nvar NavLink = /** @class */ (function () {\r\n    function class_2(hostRef) {\r\n        var _this = this;\r\n        registerInstance(this, hostRef);\r\n        /**\r\n         * The transition direction when navigating to another page.\r\n         */\r\n        this.routerDirection = 'forward';\r\n        this.onClick = function () {\r\n            return navLink(_this.el, _this.routerDirection, _this.component, _this.componentProps);\r\n        };\r\n    }\r\n    class_2.prototype.render = function () {\r\n        return (h(Host, { onClick: this.onClick }));\r\n    };\r\n    Object.defineProperty(class_2.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_2;\r\n}());\r\nvar NavPop = /** @class */ (function () {\r\n    function class_3(hostRef) {\r\n        var _this = this;\r\n        registerInstance(this, hostRef);\r\n        this.pop = function () {\r\n            return navLink(_this.el, 'back');\r\n        };\r\n    }\r\n    class_3.prototype.componentDidLoad = function () {\r\n        console.warn('[DEPRECATED][ion-nav-pop] <ion-nav-pop> is deprecated. Use `<ion-nav-link routerDirection=\"back\">` instead.');\r\n    };\r\n    class_3.prototype.render = function () {\r\n        return (h(Host, { onClick: this.pop }));\r\n    };\r\n    Object.defineProperty(class_3.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_3;\r\n}());\r\nvar NavPush = /** @class */ (function () {\r\n    function class_4(hostRef) {\r\n        var _this = this;\r\n        registerInstance(this, hostRef);\r\n        this.push = function () {\r\n            return navLink(_this.el, 'forward', _this.component, _this.componentProps);\r\n        };\r\n    }\r\n    class_4.prototype.componentDidLoad = function () {\r\n        console.warn('[DEPRECATED][ion-nav-push] `<ion-nav-push component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\">` instead.');\r\n    };\r\n    class_4.prototype.render = function () {\r\n        return (h(Host, { onClick: this.push }));\r\n    };\r\n    Object.defineProperty(class_4.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_4;\r\n}());\r\nvar NavSetRoot = /** @class */ (function () {\r\n    function class_5(hostRef) {\r\n        var _this = this;\r\n        registerInstance(this, hostRef);\r\n        this.setRoot = function () {\r\n            return navLink(_this.el, 'root', _this.component, _this.componentProps);\r\n        };\r\n    }\r\n    class_5.prototype.componentDidLoad = function () {\r\n        console.warn('[DEPRECATED][ion-nav-set-root] `<ion-nav-set-root component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\" routerDirection=\"root\">` instead.');\r\n    };\r\n    class_5.prototype.render = function () {\r\n        return (h(Host, { onClick: this.setRoot }));\r\n    };\r\n    Object.defineProperty(class_5.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return class_5;\r\n}());\r\nexport { Nav as ion_nav, NavLink as ion_nav_link, NavPop as ion_nav_pop, NavPush as ion_nav_push, NavSetRoot as ion_nav_set_root };\r\n"],"sourceRoot":""}