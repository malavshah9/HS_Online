{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-action-sheet-controller_8.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0F;AAC5D;AACoE;AACtB;;AAE5E;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAU;AACzB;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAU;AACzB;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2DAAU;AAC/B;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,+CAA+C,EAAE,4DAAkB,eAAe,wCAAwC,GAAG,EAAE,2DAAC,sBAAsB,UAAU,2DAAC;AAC1L;AACA,wBAAwB,eAAe,yBAAyB,yCAAyC,6BAA6B,mBAAmB,kBAAkB,4BAA4B,EAAE,oBAAoB,kBAAkB,mBAAmB,oBAAoB,uBAAuB,wBAAwB,sBAAsB,uBAAuB,mBAAmB,oBAAoB,cAAc,EAAE;AACza;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAU;AACzB;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAU;AACzB;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAU;AACzB;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAU;AACzB;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAU;AACzB;AACA;;AAEsV","file":"0-es2015.js","sourcesContent":["import { r as registerInstance, d as getIonMode, h, H as Host } from './core-c02a05e9.js';\r\nimport './config-503c2549.js';\r\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-518a98a4.js';\r\nimport { o as openURL, c as createColorClasses } from './theme-353a032e.js';\r\n\r\nconst ActionSheetController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create an action sheet overlay with action sheet options.\r\n     *\r\n     * @param options The options to use to create the action sheet.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-action-sheet', options);\r\n    }\r\n    /**\r\n     * Dismiss the open action sheet overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the action sheet.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the action sheet.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-action-sheet', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened action sheet overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-action-sheet');\r\n    }\r\n};\r\n\r\nconst AlertController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create an alert overlay with alert options.\r\n     *\r\n     * @param options The options to use to create the alert.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-alert', options);\r\n    }\r\n    /**\r\n     * Dismiss the open alert overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the alert.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the alert.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-alert', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened alert overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-alert');\r\n    }\r\n};\r\n\r\nconst Anchor = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /**\r\n         * When using a router, it specifies the transition direction when navigating to\r\n         * another page using `href`.\r\n         */\r\n        this.routerDirection = 'forward';\r\n        this.onClick = (ev) => {\r\n            openURL(this.href, ev, this.routerDirection);\r\n        };\r\n    }\r\n    componentDidLoad() {\r\n        console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        const attrs = {\r\n            href: this.href,\r\n            rel: this.rel\r\n        };\r\n        return (h(Host, { onClick: this.onClick, class: Object.assign({}, createColorClasses(this.color), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\r\n    }\r\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\r\n};\r\n\r\nconst LoadingController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a loading overlay with loading options.\r\n     *\r\n     * @param options The options to use to create the loading.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-loading', options);\r\n    }\r\n    /**\r\n     * Dismiss the open loading overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the loading.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the loading.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-loading', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened loading overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-loading');\r\n    }\r\n};\r\n\r\nconst ModalController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a modal overlay with modal options.\r\n     *\r\n     * @param options The options to use to create the modal.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-modal', options);\r\n    }\r\n    /**\r\n     * Dismiss the open modal overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the modal.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the modal.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-modal', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened modal overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-modal');\r\n    }\r\n};\r\n\r\nconst PickerController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a picker overlay with picker options.\r\n     *\r\n     * @param options The options to use to create the picker.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-picker', options);\r\n    }\r\n    /**\r\n     * Dismiss the open picker overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the picker.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the picker.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-picker', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened picker overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-picker');\r\n    }\r\n};\r\n\r\nconst PopoverController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a popover overlay with popover options.\r\n     *\r\n     * @param options The options to use to create the popover.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-popover', options);\r\n    }\r\n    /**\r\n     * Dismiss the open popover overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the popover.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the popover.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-popover', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened popover overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-popover');\r\n    }\r\n};\r\n\r\nconst ToastController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a toast overlay with toast options.\r\n     *\r\n     * @param options The options to use to create the toast.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-toast', options);\r\n    }\r\n    /**\r\n     * Dismiss the open toast overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\r\n     * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-toast', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened toast overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-toast');\r\n    }\r\n};\r\n\r\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };\r\n"],"sourceRoot":""}